// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableGetCounterResults {
    pub(crate) id: i32,
}

impl ImmutableGetCounterResults {
    pub fn counter(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, RESULT_COUNTER.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetCounterResults {
    pub(crate) id: i32,
}

impl MutableGetCounterResults {
    pub fn counter(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, RESULT_COUNTER.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetVliResults {
    pub(crate) id: i32,
}

impl ImmutableGetVliResults {
    pub fn buf(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.id, RESULT_BUF.get_key_id())
	}

    pub fn ni64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, RESULT_NI64.get_key_id())
	}

    pub fn str(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, RESULT_STR.get_key_id())
	}

    pub fn xi64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, RESULT_XI64.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetVliResults {
    pub(crate) id: i32,
}

impl MutableGetVliResults {
    pub fn buf(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.id, RESULT_BUF.get_key_id())
	}

    pub fn ni64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, RESULT_NI64.get_key_id())
	}

    pub fn str(&self) -> ScMutableString {
		ScMutableString::new(self.id, RESULT_STR.get_key_id())
	}

    pub fn xi64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, RESULT_XI64.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetVluResults {
    pub(crate) id: i32,
}

impl ImmutableGetVluResults {
    pub fn buf(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.id, RESULT_BUF.get_key_id())
	}

    pub fn nu64(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.id, RESULT_NU64.get_key_id())
	}

    pub fn str(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, RESULT_STR.get_key_id())
	}

    pub fn xu64(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.id, RESULT_XU64.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetVluResults {
    pub(crate) id: i32,
}

impl MutableGetVluResults {
    pub fn buf(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.id, RESULT_BUF.get_key_id())
	}

    pub fn nu64(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.id, RESULT_NU64.get_key_id())
	}

    pub fn str(&self) -> ScMutableString {
		ScMutableString::new(self.id, RESULT_STR.get_key_id())
	}

    pub fn xu64(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.id, RESULT_XU64.get_key_id())
	}
}

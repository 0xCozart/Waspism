// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableCallOnChainParams {
    pub(crate) id: i32,
}

impl ImmutableCallOnChainParams {
    pub fn hname_contract(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.id, PARAM_HNAME_CONTRACT.get_key_id())
	}

    pub fn hname_ep(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.id, PARAM_HNAME_EP.get_key_id())
	}

    pub fn int_value(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_INT_VALUE.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableCallOnChainParams {
    pub(crate) id: i32,
}

impl MutableCallOnChainParams {
    pub fn hname_contract(&self) -> ScMutableHname {
		ScMutableHname::new(self.id, PARAM_HNAME_CONTRACT.get_key_id())
	}

    pub fn hname_ep(&self) -> ScMutableHname {
		ScMutableHname::new(self.id, PARAM_HNAME_EP.get_key_id())
	}

    pub fn int_value(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_INT_VALUE.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableCheckContextFromFullEPParams {
    pub(crate) id: i32,
}

impl ImmutableCheckContextFromFullEPParams {
    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_AGENT_ID.get_key_id())
	}

    pub fn caller(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_CALLER.get_key_id())
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}

    pub fn chain_owner_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_CHAIN_OWNER_ID.get_key_id())
	}

    pub fn contract_creator(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_CONTRACT_CREATOR.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableCheckContextFromFullEPParams {
    pub(crate) id: i32,
}

impl MutableCheckContextFromFullEPParams {
    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_AGENT_ID.get_key_id())
	}

    pub fn caller(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_CALLER.get_key_id())
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}

    pub fn chain_owner_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_CHAIN_OWNER_ID.get_key_id())
	}

    pub fn contract_creator(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_CONTRACT_CREATOR.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableInitParams {
    pub(crate) id: i32,
}

impl ImmutableInitParams {
    pub fn fail(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, idx_map(IDX_PARAM_FAIL))
	}
}

#[derive(Clone, Copy)]
pub struct MutableInitParams {
    pub(crate) id: i32,
}

impl MutableInitParams {
    pub fn fail(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, idx_map(IDX_PARAM_FAIL))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutablePassTypesFullParams {
    pub(crate) id: i32,
}

impl ImmutablePassTypesFullParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.id, PARAM_ADDRESS.get_key_id())
	}

    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_AGENT_ID.get_key_id())
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}

    pub fn contract_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_CONTRACT_ID.get_key_id())
	}

    pub fn hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, PARAM_HASH.get_key_id())
	}

    pub fn hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.id, PARAM_HNAME.get_key_id())
	}

    pub fn hname_zero(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.id, PARAM_HNAME_ZERO.get_key_id())
	}

    pub fn int64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_INT64.get_key_id())
	}

    pub fn int64_zero(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_INT64_ZERO.get_key_id())
	}

    pub fn string(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, PARAM_STRING.get_key_id())
	}

    pub fn string_zero(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, PARAM_STRING_ZERO.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutablePassTypesFullParams {
    pub(crate) id: i32,
}

impl MutablePassTypesFullParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.id, PARAM_ADDRESS.get_key_id())
	}

    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_AGENT_ID.get_key_id())
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}

    pub fn contract_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_CONTRACT_ID.get_key_id())
	}

    pub fn hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, PARAM_HASH.get_key_id())
	}

    pub fn hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.id, PARAM_HNAME.get_key_id())
	}

    pub fn hname_zero(&self) -> ScMutableHname {
		ScMutableHname::new(self.id, PARAM_HNAME_ZERO.get_key_id())
	}

    pub fn int64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_INT64.get_key_id())
	}

    pub fn int64_zero(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_INT64_ZERO.get_key_id())
	}

    pub fn string(&self) -> ScMutableString {
		ScMutableString::new(self.id, PARAM_STRING.get_key_id())
	}

    pub fn string_zero(&self) -> ScMutableString {
		ScMutableString::new(self.id, PARAM_STRING_ZERO.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableRunRecursionParams {
    pub(crate) id: i32,
}

impl ImmutableRunRecursionParams {
    pub fn int_value(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_INT_VALUE.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableRunRecursionParams {
    pub(crate) id: i32,
}

impl MutableRunRecursionParams {
    pub fn int_value(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_INT_VALUE.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSendToAddressParams {
    pub(crate) id: i32,
}

impl ImmutableSendToAddressParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.id, PARAM_ADDRESS.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableSendToAddressParams {
    pub(crate) id: i32,
}

impl MutableSendToAddressParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.id, PARAM_ADDRESS.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSetIntParams {
    pub(crate) id: i32,
}

impl ImmutableSetIntParams {
    pub fn int_value(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_INT_VALUE.get_key_id())
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, PARAM_NAME.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableSetIntParams {
    pub(crate) id: i32,
}

impl MutableSetIntParams {
    pub fn int_value(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_INT_VALUE.get_key_id())
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, PARAM_NAME.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSpawnParams {
    pub(crate) id: i32,
}

impl ImmutableSpawnParams {
    pub fn prog_hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, PARAM_PROG_HASH.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableSpawnParams {
    pub(crate) id: i32,
}

impl MutableSpawnParams {
    pub fn prog_hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, PARAM_PROG_HASH.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableTestEventLogGenericDataParams {
    pub(crate) id: i32,
}

impl ImmutableTestEventLogGenericDataParams {
    pub fn counter(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_COUNTER.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableTestEventLogGenericDataParams {
    pub(crate) id: i32,
}

impl MutableTestEventLogGenericDataParams {
    pub fn counter(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_COUNTER.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableWithdrawToChainParams {
    pub(crate) id: i32,
}

impl ImmutableWithdrawToChainParams {
    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableWithdrawToChainParams {
    pub(crate) id: i32,
}

impl MutableWithdrawToChainParams {
    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableCheckContextFromViewEPParams {
    pub(crate) id: i32,
}

impl ImmutableCheckContextFromViewEPParams {
    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_AGENT_ID.get_key_id())
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}

    pub fn chain_owner_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_CHAIN_OWNER_ID.get_key_id())
	}

    pub fn contract_creator(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_CONTRACT_CREATOR.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableCheckContextFromViewEPParams {
    pub(crate) id: i32,
}

impl MutableCheckContextFromViewEPParams {
    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_AGENT_ID.get_key_id())
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}

    pub fn chain_owner_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_CHAIN_OWNER_ID.get_key_id())
	}

    pub fn contract_creator(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_CONTRACT_CREATOR.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableFibonacciParams {
    pub(crate) id: i32,
}

impl ImmutableFibonacciParams {
    pub fn int_value(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_INT_VALUE.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableFibonacciParams {
    pub(crate) id: i32,
}

impl MutableFibonacciParams {
    pub fn int_value(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_INT_VALUE.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetIntParams {
    pub(crate) id: i32,
}

impl ImmutableGetIntParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, PARAM_NAME.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetIntParams {
    pub(crate) id: i32,
}

impl MutableGetIntParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, PARAM_NAME.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetStringValueParams {
    pub(crate) id: i32,
}

impl ImmutableGetStringValueParams {
    pub fn var_name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, PARAM_VAR_NAME.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetStringValueParams {
    pub(crate) id: i32,
}

impl MutableGetStringValueParams {
    pub fn var_name(&self) -> ScMutableString {
		ScMutableString::new(self.id, PARAM_VAR_NAME.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ImmutablePassTypesViewParams {
    pub(crate) id: i32,
}

impl ImmutablePassTypesViewParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.id, PARAM_ADDRESS.get_key_id())
	}

    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_AGENT_ID.get_key_id())
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}

    pub fn contract_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, PARAM_CONTRACT_ID.get_key_id())
	}

    pub fn hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, PARAM_HASH.get_key_id())
	}

    pub fn hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.id, PARAM_HNAME.get_key_id())
	}

    pub fn hname_zero(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.id, PARAM_HNAME_ZERO.get_key_id())
	}

    pub fn int64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_INT64.get_key_id())
	}

    pub fn int64_zero(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.id, PARAM_INT64_ZERO.get_key_id())
	}

    pub fn string(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, PARAM_STRING.get_key_id())
	}

    pub fn string_zero(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, PARAM_STRING_ZERO.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MutablePassTypesViewParams {
    pub(crate) id: i32,
}

impl MutablePassTypesViewParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.id, PARAM_ADDRESS.get_key_id())
	}

    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_AGENT_ID.get_key_id())
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.id, PARAM_CHAIN_ID.get_key_id())
	}

    pub fn contract_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, PARAM_CONTRACT_ID.get_key_id())
	}

    pub fn hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, PARAM_HASH.get_key_id())
	}

    pub fn hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.id, PARAM_HNAME.get_key_id())
	}

    pub fn hname_zero(&self) -> ScMutableHname {
		ScMutableHname::new(self.id, PARAM_HNAME_ZERO.get_key_id())
	}

    pub fn int64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_INT64.get_key_id())
	}

    pub fn int64_zero(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.id, PARAM_INT64_ZERO.get_key_id())
	}

    pub fn string(&self) -> ScMutableString {
		ScMutableString::new(self.id, PARAM_STRING.get_key_id())
	}

    pub fn string_zero(&self) -> ScMutableString {
		ScMutableString::new(self.id, PARAM_STRING_ZERO.get_key_id())
	}
}

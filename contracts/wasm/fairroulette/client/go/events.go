// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package fairroulette

import (
	"github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib/client"
)

var EventHandlers = map[string]func([]string){
	"fairroulette.bet":    onFairRouletteBetThunk,
	"fairroulette.payout": onFairRoulettePayoutThunk,
	"fairroulette.round":  onFairRouletteRoundThunk,
	"fairroulette.start":  onFairRouletteStartThunk,
	"fairroulette.stop":   onFairRouletteStopThunk,
	"fairroulette.winner": onFairRouletteWinnerThunk,
}

type EventBet struct {
	client.Event
	Address client.Address
	Amount  int64
	Number  int64
}

func onFairRouletteBetThunk(message []string) {
	e := &EventBet{}
	e.Init(message)
	e.Address = e.NextAddress()
	e.Amount = e.NextInt64()
	e.Number = e.NextInt64()
	OnFairRouletteBet(e)
}

type EventPayout struct {
	client.Event
	Address client.Address
	Amount  int64
}

func onFairRoulettePayoutThunk(message []string) {
	e := &EventPayout{}
	e.Init(message)
	e.Address = e.NextAddress()
	e.Amount = e.NextInt64()
	OnFairRoulettePayout(e)
}

type EventRound struct {
	client.Event
	Number int64
}

func onFairRouletteRoundThunk(message []string) {
	e := &EventRound{}
	e.Init(message)
	e.Number = e.NextInt64()
	OnFairRouletteRound(e)
}

type EventStart struct {
	client.Event
}

func onFairRouletteStartThunk(message []string) {
	e := &EventStart{}
	e.Init(message)
	OnFairRouletteStart(e)
}

type EventStop struct {
	client.Event
}

func onFairRouletteStopThunk(message []string) {
	e := &EventStop{}
	e.Init(message)
	OnFairRouletteStop(e)
}

type EventWinner struct {
	client.Event
	Number int64
}

func onFairRouletteWinnerThunk(message []string) {
	e := &EventWinner{}
	e.Init(message)
	e.Number = e.NextInt64()
	OnFairRouletteWinner(e)
}

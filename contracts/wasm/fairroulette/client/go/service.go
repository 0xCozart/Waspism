// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package fairroulette

import (
	"github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib/client"
)

const (
	ArgNumber     = "number"
	ArgPlayPeriod = "playPeriod"

	ResLastWinningNumber = "lastWinningNumber"
	ResRoundNumber       = "roundNumber"
	ResRoundStartedAt    = "roundStartedAt"
	ResRoundStatus       = "roundStatus"
)

type ForcePayoutFunc struct{}

func (f ForcePayoutFunc) Post() {
	// TODO DoPost(nil)
}

type ForceResetFunc struct{}

func (f ForceResetFunc) Post() {
	// TODO DoPost(nil)
}

type PayWinnersFunc struct{}

func (f PayWinnersFunc) Post() {
	// TODO DoPost(nil)
}

type PlaceBetFunc struct {
	args client.Arguments
}

func (f PlaceBetFunc) Number(v int64) {
	f.args.SetInt64(ArgNumber, v)
}

func (f PlaceBetFunc) Post() {
	f.args.Mandatory(ArgNumber)
	// TODO DoPost(f.args)
}

type PlayPeriodFunc struct {
	args client.Arguments
}

func (f PlayPeriodFunc) PlayPeriod(v int32) {
	f.args.SetInt32(ArgPlayPeriod, v)
}

func (f PlayPeriodFunc) Post() {
	f.args.Mandatory(ArgPlayPeriod)
	// TODO DoPost(f.args)
}

type LastWinningNumberView struct{}

func (f LastWinningNumberView) Call() LastWinningNumberResults {
	// TODO DoCall(nil) instead of client.NewResults()
	return LastWinningNumberResults{res: client.NewResults()}
}

type LastWinningNumberResults struct {
	res client.Results
}

func (r LastWinningNumberResults) LastWinningNumber() int64 {
	return r.res.GetInt64(ResLastWinningNumber)
}

type RoundNumberView struct{}

func (f RoundNumberView) Call() RoundNumberResults {
	// TODO DoCall(nil) instead of client.NewResults()
	return RoundNumberResults{res: client.NewResults()}
}

type RoundNumberResults struct {
	res client.Results
}

func (r RoundNumberResults) RoundNumber() int64 {
	return r.res.GetInt64(ResRoundNumber)
}

type RoundStartedAtView struct{}

func (f RoundStartedAtView) Call() RoundStartedAtResults {
	// TODO DoCall(nil) instead of client.NewResults()
	return RoundStartedAtResults{res: client.NewResults()}
}

type RoundStartedAtResults struct {
	res client.Results
}

func (r RoundStartedAtResults) RoundStartedAt() int32 {
	return r.res.GetInt32(ResRoundStartedAt)
}

type RoundStatusView struct{}

func (f RoundStatusView) Call() RoundStatusResults {
	// TODO DoCall(nil) instead of client.NewResults()
	return RoundStatusResults{res: client.NewResults()}
}

type RoundStatusResults struct {
	res client.Results
}

func (r RoundStatusResults) RoundStatus() int16 {
	return r.res.GetInt16(ResRoundStatus)
}

type FairRouletteService struct {
	client.Service
}

func NewFairRouletteService(cl client.ServiceClient, chainID string) *FairRouletteService {
	s := &FairRouletteService{}
	s.Service.Init(cl, chainID, "df79d138", EventHandlers)
	return s
}

func (s *FairRouletteService) ForcePayout() ForcePayoutFunc {
	return ForcePayoutFunc{}
}

func (s *FairRouletteService) ForceReset() ForceResetFunc {
	return ForceResetFunc{}
}

func (s *FairRouletteService) PayWinners() PayWinnersFunc {
	return PayWinnersFunc{}
}

func (s *FairRouletteService) PlaceBet() PlaceBetFunc {
	return PlaceBetFunc{}
}

func (s *FairRouletteService) PlayPeriod() PlayPeriodFunc {
	return PlayPeriodFunc{}
}

func (s *FairRouletteService) LastWinningNumber() LastWinningNumberView {
	return LastWinningNumberView{}
}

func (s *FairRouletteService) RoundNumber() RoundNumberView {
	return RoundNumberView{}
}

func (s *FairRouletteService) RoundStartedAt() RoundStartedAtView {
	return RoundStartedAtView{}
}

func (s *FairRouletteService) RoundStatus() RoundStatusView {
	return RoundStatusView{}
}

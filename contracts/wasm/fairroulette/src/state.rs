// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::structs::*;

#[derive(Clone, Copy)]
pub struct ArrayOfImmutableBet {
	pub(crate) obj_id: i32,
}

impl ArrayOfImmutableBet {
    pub fn length(&self) -> u32 {
        get_length(self.obj_id)
    }

	pub fn get_bet(&self, index: u32) -> ImmutableBet {
		ImmutableBet { obj_id: self.obj_id, key_id: Key32(index as i32) }
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableFairRouletteState {
    pub(crate) id: i32,
}

impl ImmutableFairRouletteState {
    pub fn bets(&self) -> ArrayOfImmutableBet {
		let arr_id = get_object_id(self.id, STATE_BETS.get_key_id(), TYPE_ARRAY | TYPE_BYTES);
		ArrayOfImmutableBet { obj_id: arr_id }
	}

    pub fn last_winning_number(&self) -> ScImmutableUint16 {
		ScImmutableUint16::new(self.id, STATE_LAST_WINNING_NUMBER.get_key_id())
	}

    pub fn play_period(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, STATE_PLAY_PERIOD.get_key_id())
	}

    pub fn round_number(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, STATE_ROUND_NUMBER.get_key_id())
	}

    pub fn round_started_at(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, STATE_ROUND_STARTED_AT.get_key_id())
	}

    pub fn round_status(&self) -> ScImmutableUint16 {
		ScImmutableUint16::new(self.id, STATE_ROUND_STATUS.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct ArrayOfMutableBet {
	pub(crate) obj_id: i32,
}

impl ArrayOfMutableBet {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> u32 {
        get_length(self.obj_id)
    }

	pub fn get_bet(&self, index: u32) -> MutableBet {
		MutableBet { obj_id: self.obj_id, key_id: Key32(index as i32) }
	}
}

#[derive(Clone, Copy)]
pub struct MutableFairRouletteState {
    pub(crate) id: i32,
}

impl MutableFairRouletteState {
    pub fn as_immutable(&self) -> ImmutableFairRouletteState {
		ImmutableFairRouletteState { id: self.id }
	}

    pub fn bets(&self) -> ArrayOfMutableBet {
		let arr_id = get_object_id(self.id, STATE_BETS.get_key_id(), TYPE_ARRAY | TYPE_BYTES);
		ArrayOfMutableBet { obj_id: arr_id }
	}

    pub fn last_winning_number(&self) -> ScMutableUint16 {
		ScMutableUint16::new(self.id, STATE_LAST_WINNING_NUMBER.get_key_id())
	}

    pub fn play_period(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, STATE_PLAY_PERIOD.get_key_id())
	}

    pub fn round_number(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, STATE_ROUND_NUMBER.get_key_id())
	}

    pub fn round_started_at(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, STATE_ROUND_STARTED_AT.get_key_id())
	}

    pub fn round_status(&self) -> ScMutableUint16 {
		ScMutableUint16::new(self.id, STATE_ROUND_STATUS.get_key_id())
	}
}

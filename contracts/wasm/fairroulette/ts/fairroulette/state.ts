// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class ArrayOfImmutableBet {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

	getBet(index: i32): sc.ImmutableBet {
		return new sc.ImmutableBet(this.objID, new wasmlib.Key32(index));
	}
}

export class ImmutableFairRouletteState extends wasmlib.ScMapID {
    bets(): sc.ArrayOfImmutableBet {
		let arrID = wasmlib.getObjectID(this.mapID, wasmlib.Key32.fromString(sc.StateBets), wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfImmutableBet(arrID);
	}

    lastWinningNumber(): wasmlib.ScImmutableInt64 {
		return new wasmlib.ScImmutableInt64(this.mapID, wasmlib.Key32.fromString(sc.StateLastWinningNumber));
	}

    playPeriod(): wasmlib.ScImmutableInt32 {
		return new wasmlib.ScImmutableInt32(this.mapID, wasmlib.Key32.fromString(sc.StatePlayPeriod));
	}

    roundNumber(): wasmlib.ScImmutableInt64 {
		return new wasmlib.ScImmutableInt64(this.mapID, wasmlib.Key32.fromString(sc.StateRoundNumber));
	}

    roundStartedAt(): wasmlib.ScImmutableInt32 {
		return new wasmlib.ScImmutableInt32(this.mapID, wasmlib.Key32.fromString(sc.StateRoundStartedAt));
	}

    roundStatus(): wasmlib.ScImmutableInt16 {
		return new wasmlib.ScImmutableInt16(this.mapID, wasmlib.Key32.fromString(sc.StateRoundStatus));
	}
}

export class ArrayOfMutableBet {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

	getBet(index: i32): sc.MutableBet {
		return new sc.MutableBet(this.objID, new wasmlib.Key32(index));
	}
}

export class MutableFairRouletteState extends wasmlib.ScMapID {
    asImmutable(): sc.ImmutableFairRouletteState {
		const imm = new sc.ImmutableFairRouletteState();
		imm.mapID = this.mapID;
		return imm;
	}

    bets(): sc.ArrayOfMutableBet {
		let arrID = wasmlib.getObjectID(this.mapID, wasmlib.Key32.fromString(sc.StateBets), wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfMutableBet(arrID);
	}

    lastWinningNumber(): wasmlib.ScMutableInt64 {
		return new wasmlib.ScMutableInt64(this.mapID, wasmlib.Key32.fromString(sc.StateLastWinningNumber));
	}

    playPeriod(): wasmlib.ScMutableInt32 {
		return new wasmlib.ScMutableInt32(this.mapID, wasmlib.Key32.fromString(sc.StatePlayPeriod));
	}

    roundNumber(): wasmlib.ScMutableInt64 {
		return new wasmlib.ScMutableInt64(this.mapID, wasmlib.Key32.fromString(sc.StateRoundNumber));
	}

    roundStartedAt(): wasmlib.ScMutableInt32 {
		return new wasmlib.ScMutableInt32(this.mapID, wasmlib.Key32.fromString(sc.StateRoundStartedAt));
	}

    roundStatus(): wasmlib.ScMutableInt16 {
		return new wasmlib.ScMutableInt16(this.mapID, wasmlib.Key32.fromString(sc.StateRoundStatus));
	}
}

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as client from "wasmlib/client"
import * as events from "./events"

const ArgApproval = "approval";
const ArgApproved = "approved";
const ArgData = "data";
const ArgFrom = "from";
const ArgName = "n";
const ArgOperator = "operator";
const ArgOwner = "owner";
const ArgSymbol = "s";
const ArgTo = "to";
const ArgTokenID = "tokenID";

const ResAmount = "amount";
const ResApproval = "approval";
const ResApproved = "approved";
const ResName = "name";
const ResOwner = "owner";
const ResSymbol = "symbol";
const ResTokenURI = "tokenURI";

///////////////////////////// approve /////////////////////////////

export class ApproveFunc extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	approved(v: client.AgentID): void {
		this.args.setAgentID(ArgApproved, v);
	}
	
	tokenID(v: client.Hash): void {
		this.args.setHash(ArgTokenID, v);
	}
	
	public async post(): Promise<void> {
		this.args.mandatory(ArgApproved);
		this.args.mandatory(ArgTokenID);
		this.svc.postRequest("approve", this.args);
	}
}

///////////////////////////// burn /////////////////////////////

export class BurnFunc extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	tokenID(v: client.Hash): void {
		this.args.setHash(ArgTokenID, v);
	}
	
	public async post(): Promise<void> {
		this.args.mandatory(ArgTokenID);
		this.svc.postRequest("burn", this.args);
	}
}

///////////////////////////// init /////////////////////////////

export class InitFunc extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	name(v: string): void {
		this.args.setString(ArgName, v);
	}
	
	symbol(v: string): void {
		this.args.setString(ArgSymbol, v);
	}
	
	public async post(): Promise<void> {
		this.args.mandatory(ArgName);
		this.args.mandatory(ArgSymbol);
		this.svc.postRequest("init", this.args);
	}
}

///////////////////////////// mint /////////////////////////////

export class MintFunc extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	tokenID(v: client.Hash): void {
		this.args.setHash(ArgTokenID, v);
	}
	
	public async post(): Promise<void> {
		this.args.mandatory(ArgTokenID);
		this.svc.postRequest("mint", this.args);
	}
}

///////////////////////////// safeTransferFrom /////////////////////////////

export class SafeTransferFromFunc extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	data(v: client.Bytes): void {
		this.args.setBytes(ArgData, v);
	}
	
	from(v: client.AgentID): void {
		this.args.setAgentID(ArgFrom, v);
	}
	
	to(v: client.AgentID): void {
		this.args.setAgentID(ArgTo, v);
	}
	
	tokenID(v: client.Hash): void {
		this.args.setHash(ArgTokenID, v);
	}
	
	public async post(): Promise<void> {
		this.args.mandatory(ArgData);
		this.args.mandatory(ArgFrom);
		this.args.mandatory(ArgTo);
		this.args.mandatory(ArgTokenID);
		this.svc.postRequest("safeTransferFrom", this.args);
	}
}

///////////////////////////// setApprovalForAll /////////////////////////////

export class SetApprovalForAllFunc extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	approval(v: boolean): void {
		this.args.setBool(ArgApproval, v);
	}
	
	operator(v: client.AgentID): void {
		this.args.setAgentID(ArgOperator, v);
	}
	
	public async post(): Promise<void> {
		this.args.mandatory(ArgApproval);
		this.args.mandatory(ArgOperator);
		this.svc.postRequest("setApprovalForAll", this.args);
	}
}

///////////////////////////// transferFrom /////////////////////////////

export class TransferFromFunc extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	from(v: client.AgentID): void {
		this.args.setAgentID(ArgFrom, v);
	}
	
	to(v: client.AgentID): void {
		this.args.setAgentID(ArgTo, v);
	}
	
	tokenID(v: client.Hash): void {
		this.args.setHash(ArgTokenID, v);
	}
	
	public async post(): Promise<void> {
		this.args.mandatory(ArgFrom);
		this.args.mandatory(ArgTo);
		this.args.mandatory(ArgTokenID);
		this.svc.postRequest("transferFrom", this.args);
	}
}

///////////////////////////// balanceOf /////////////////////////////

export class BalanceOfView extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	owner(v: client.AgentID): void {
		this.args.setAgentID(ArgOwner, v);
	}

	public async call(): Promise<BalanceOfResults> {
		this.args.mandatory(ArgOwner);
		return new BalanceOfResults(this.svc.callView("balanceOf", this.args));
	}
}

export class BalanceOfResults extends client.ViewResults {
	
	amountExists(): boolean {
		return this.res.exists(ResAmount)
	}

	amount(): client.Uint64 {
		return this.res.getUint64(ResAmount);
	}
}

///////////////////////////// getApproved /////////////////////////////

export class GetApprovedView extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	tokenID(v: client.Hash): void {
		this.args.setHash(ArgTokenID, v);
	}

	public async call(): Promise<GetApprovedResults> {
		this.args.mandatory(ArgTokenID);
		return new GetApprovedResults(this.svc.callView("getApproved", this.args));
	}
}

export class GetApprovedResults extends client.ViewResults {
	
	approvedExists(): boolean {
		return this.res.exists(ResApproved)
	}

	approved(): client.AgentID {
		return this.res.getAgentID(ResApproved);
	}
}

///////////////////////////// isApprovedForAll /////////////////////////////

export class IsApprovedForAllView extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	operator(v: client.AgentID): void {
		this.args.setAgentID(ArgOperator, v);
	}
	
	owner(v: client.AgentID): void {
		this.args.setAgentID(ArgOwner, v);
	}

	public async call(): Promise<IsApprovedForAllResults> {
		this.args.mandatory(ArgOperator);
		this.args.mandatory(ArgOwner);
		return new IsApprovedForAllResults(this.svc.callView("isApprovedForAll", this.args));
	}
}

export class IsApprovedForAllResults extends client.ViewResults {
	
	approvalExists(): boolean {
		return this.res.exists(ResApproval)
	}

	approval(): boolean {
		return this.res.getBool(ResApproval);
	}
}

///////////////////////////// name /////////////////////////////

export class NameView extends client.FuncObject {

	public async call(): Promise<NameResults> {
		return new NameResults(this.svc.callView("name", null));
	}
}

export class NameResults extends client.ViewResults {

	name(): string {
		return this.res.getString(ResName);
	}
}

///////////////////////////// ownerOf /////////////////////////////

export class OwnerOfView extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	tokenID(v: client.Hash): void {
		this.args.setHash(ArgTokenID, v);
	}

	public async call(): Promise<OwnerOfResults> {
		this.args.mandatory(ArgTokenID);
		return new OwnerOfResults(this.svc.callView("ownerOf", this.args));
	}
}

export class OwnerOfResults extends client.ViewResults {
	
	ownerExists(): boolean {
		return this.res.exists(ResOwner)
	}

	owner(): client.AgentID {
		return this.res.getAgentID(ResOwner);
	}
}

///////////////////////////// symbol /////////////////////////////

export class SymbolView extends client.FuncObject {

	public async call(): Promise<SymbolResults> {
		return new SymbolResults(this.svc.callView("symbol", null));
	}
}

export class SymbolResults extends client.ViewResults {

	symbol(): string {
		return this.res.getString(ResSymbol);
	}
}

///////////////////////////// tokenURI /////////////////////////////

export class TokenURIView extends client.FuncObject {
	args: client.Arguments = new client.Arguments();
	
	tokenID(v: client.Hash): void {
		this.args.setHash(ArgTokenID, v);
	}

	public async call(): Promise<TokenURIResults> {
		this.args.mandatory(ArgTokenID);
		return new TokenURIResults(this.svc.callView("tokenURI", this.args));
	}
}

export class TokenURIResults extends client.ViewResults {
	
	tokenURIExists(): boolean {
		return this.res.exists(ResTokenURI)
	}

	tokenURI(): string {
		return this.res.getString(ResTokenURI);
	}
}

///////////////////////////// Erc721Service /////////////////////////////

export class Erc721Service extends client.Service {

	constructor(cl: client.ServiceClient, chainID: string) {
		super(cl, chainID, "d967c216", events.eventHandlers);
	}

	public approve(): ApproveFunc {
    	return new ApproveFunc(this);
	}

	public burn(): BurnFunc {
    	return new BurnFunc(this);
	}

	public init(): InitFunc {
    	return new InitFunc(this);
	}

	public mint(): MintFunc {
    	return new MintFunc(this);
	}

	public safeTransferFrom(): SafeTransferFromFunc {
    	return new SafeTransferFromFunc(this);
	}

	public setApprovalForAll(): SetApprovalForAllFunc {
    	return new SetApprovalForAllFunc(this);
	}

	public transferFrom(): TransferFromFunc {
    	return new TransferFromFunc(this);
	}

	public balanceOf(): BalanceOfView {
    	return new BalanceOfView(this);
	}

	public getApproved(): GetApprovedView {
    	return new GetApprovedView(this);
	}

	public isApprovedForAll(): IsApprovedForAllView {
    	return new IsApprovedForAllView(this);
	}

	public name(): NameView {
    	return new NameView(this);
	}

	public ownerOf(): OwnerOfView {
    	return new OwnerOfView(this);
	}

	public symbol(): SymbolView {
    	return new SymbolView(this);
	}

	public tokenURI(): TokenURIView {
    	return new TokenURIView(this);
	}
}

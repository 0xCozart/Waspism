// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as client from "wasmlib/client"
import * as app from "./erc721"

export const eventHandlers: client.EventHandlers = {
	"erc721.approval": onErc721ApprovalThunk,
	"erc721.approvalForAll": onErc721ApprovalForAllThunk,
	"erc721.init": onErc721InitThunk,
	"erc721.mint": onErc721MintThunk,
	"erc721.transfer": onErc721TransferThunk,
};

export class EventApproval extends client.Event {
  	public approved: client.AgentID;
  	public owner: client.AgentID;
  	public tokenID: client.Hash;
}

function onErc721ApprovalThunk(message: string[]) {
	let e = new EventApproval(message);
	e.approved = e.nextAgentID();
	e.owner = e.nextAgentID();
	e.tokenID = e.nextHash();
	app.onErc721Approval(e);
}

export class EventApprovalForAll extends client.Event {
  	public approval: client.Bool;
  	public operator: client.AgentID;
  	public owner: client.AgentID;
}

function onErc721ApprovalForAllThunk(message: string[]) {
	let e = new EventApprovalForAll(message);
	e.approval = e.nextBool();
	e.operator = e.nextAgentID();
	e.owner = e.nextAgentID();
	app.onErc721ApprovalForAll(e);
}

export class EventInit extends client.Event {
  	public name: client.String;
  	public symbol: client.String;
}

function onErc721InitThunk(message: string[]) {
	let e = new EventInit(message);
	e.name = e.nextString();
	e.symbol = e.nextString();
	app.onErc721Init(e);
}

export class EventMint extends client.Event {
  	public balance: client.Uint64;
  	public owner: client.AgentID;
  	public tokenID: client.Hash;
}

function onErc721MintThunk(message: string[]) {
	let e = new EventMint(message);
	e.balance = e.nextUint64();
	e.owner = e.nextAgentID();
	e.tokenID = e.nextHash();
	app.onErc721Mint(e);
}

export class EventTransfer extends client.Event {
  	public from: client.AgentID;
  	public to: client.AgentID;
  	public tokenID: client.Hash;
}

function onErc721TransferThunk(message: string[]) {
	let e = new EventTransfer(message);
	e.from = e.nextAgentID();
	e.to = e.nextAgentID();
	e.tokenID = e.nextHash();
	app.onErc721Transfer(e);
}

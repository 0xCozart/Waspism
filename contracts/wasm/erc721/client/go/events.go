// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package erc721

import (
	"github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib/client"
)

var EventHandlers = map[string]func([]string){
	"erc721.approval":       onErc721ApprovalThunk,
	"erc721.approvalForAll": onErc721ApprovalForAllThunk,
	"erc721.init":           onErc721InitThunk,
	"erc721.mint":           onErc721MintThunk,
	"erc721.transfer":       onErc721TransferThunk,
}

type EventApproval struct {
	client.Event
	Approved client.AgentID
	Owner    client.AgentID
	TokenID  client.Hash
}

func onErc721ApprovalThunk(message []string) {
	e := &EventApproval{}
	e.Init(message)
	e.Approved = e.NextAgentID()
	e.Owner = e.NextAgentID()
	e.TokenID = e.NextHash()
	OnErc721Approval(e)
}

type EventApprovalForAll struct {
	client.Event
	Approval bool
	Operator client.AgentID
	Owner    client.AgentID
}

func onErc721ApprovalForAllThunk(message []string) {
	e := &EventApprovalForAll{}
	e.Init(message)
	e.Approval = e.NextBool()
	e.Operator = e.NextAgentID()
	e.Owner = e.NextAgentID()
	OnErc721ApprovalForAll(e)
}

type EventInit struct {
	client.Event
	Name   string
	Symbol string
}

func onErc721InitThunk(message []string) {
	e := &EventInit{}
	e.Init(message)
	e.Name = e.NextString()
	e.Symbol = e.NextString()
	OnErc721Init(e)
}

type EventMint struct {
	client.Event
	Balance uint64
	Owner   client.AgentID
	TokenID client.Hash
}

func onErc721MintThunk(message []string) {
	e := &EventMint{}
	e.Init(message)
	e.Balance = e.NextUint64()
	e.Owner = e.NextAgentID()
	e.TokenID = e.NextHash()
	OnErc721Mint(e)
}

type EventTransfer struct {
	client.Event
	From    client.AgentID
	To      client.AgentID
	TokenID client.Hash
}

func onErc721TransferThunk(message []string) {
	e := &EventTransfer{}
	e.Init(message)
	e.From = e.NextAgentID()
	e.To = e.NextAgentID()
	e.TokenID = e.NextHash()
	OnErc721Transfer(e)
}

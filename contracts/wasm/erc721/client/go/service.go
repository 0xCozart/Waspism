// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package erc721

import (
	"github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib/client"
)

const (
	ArgApproval = "approval"
	ArgApproved = "approved"
	ArgData     = "data"
	ArgFrom     = "from"
	ArgName     = "n"
	ArgOperator = "operator"
	ArgOwner    = "owner"
	ArgSymbol   = "s"
	ArgTo       = "to"
	ArgTokenID  = "tokenID"

	ResAmount   = "amount"
	ResApproval = "approval"
	ResApproved = "approved"
	ResName     = "name"
	ResOwner    = "owner"
	ResSymbol   = "symbol"
	ResTokenURI = "tokenURI"
)

///////////////////////////// approve /////////////////////////////

type ApproveFunc struct {
	svc  *client.Service
	args client.Arguments
}

func (f ApproveFunc) Approved(v client.AgentID) {
	f.args.SetAgentID(ArgApproved, v)
}

func (f ApproveFunc) TokenID(v client.Hash) {
	f.args.SetHash(ArgTokenID, v)
}

func (f ApproveFunc) Post() {
	f.args.Mandatory(ArgApproved)
	f.args.Mandatory(ArgTokenID)
	f.svc.PostRequest("approve", &f.args)
}

///////////////////////////// burn /////////////////////////////

type BurnFunc struct {
	svc  *client.Service
	args client.Arguments
}

func (f BurnFunc) TokenID(v client.Hash) {
	f.args.SetHash(ArgTokenID, v)
}

func (f BurnFunc) Post() {
	f.args.Mandatory(ArgTokenID)
	f.svc.PostRequest("burn", &f.args)
}

///////////////////////////// init /////////////////////////////

type InitFunc struct {
	svc  *client.Service
	args client.Arguments
}

func (f InitFunc) Name(v string) {
	f.args.SetString(ArgName, v)
}

func (f InitFunc) Symbol(v string) {
	f.args.SetString(ArgSymbol, v)
}

func (f InitFunc) Post() {
	f.args.Mandatory(ArgName)
	f.args.Mandatory(ArgSymbol)
	f.svc.PostRequest("init", &f.args)
}

///////////////////////////// mint /////////////////////////////

type MintFunc struct {
	svc  *client.Service
	args client.Arguments
}

func (f MintFunc) TokenID(v client.Hash) {
	f.args.SetHash(ArgTokenID, v)
}

func (f MintFunc) Post() {
	f.args.Mandatory(ArgTokenID)
	f.svc.PostRequest("mint", &f.args)
}

///////////////////////////// safeTransferFrom /////////////////////////////

type SafeTransferFromFunc struct {
	svc  *client.Service
	args client.Arguments
}

func (f SafeTransferFromFunc) Data(v []byte) {
	f.args.SetBytes(ArgData, v)
}

func (f SafeTransferFromFunc) From(v client.AgentID) {
	f.args.SetAgentID(ArgFrom, v)
}

func (f SafeTransferFromFunc) To(v client.AgentID) {
	f.args.SetAgentID(ArgTo, v)
}

func (f SafeTransferFromFunc) TokenID(v client.Hash) {
	f.args.SetHash(ArgTokenID, v)
}

func (f SafeTransferFromFunc) Post() {
	f.args.Mandatory(ArgData)
	f.args.Mandatory(ArgFrom)
	f.args.Mandatory(ArgTo)
	f.args.Mandatory(ArgTokenID)
	f.svc.PostRequest("safeTransferFrom", &f.args)
}

///////////////////////////// setApprovalForAll /////////////////////////////

type SetApprovalForAllFunc struct {
	svc  *client.Service
	args client.Arguments
}

func (f SetApprovalForAllFunc) Approval(v bool) {
	f.args.SetBool(ArgApproval, v)
}

func (f SetApprovalForAllFunc) Operator(v client.AgentID) {
	f.args.SetAgentID(ArgOperator, v)
}

func (f SetApprovalForAllFunc) Post() {
	f.args.Mandatory(ArgApproval)
	f.args.Mandatory(ArgOperator)
	f.svc.PostRequest("setApprovalForAll", &f.args)
}

///////////////////////////// transferFrom /////////////////////////////

type TransferFromFunc struct {
	svc  *client.Service
	args client.Arguments
}

func (f TransferFromFunc) From(v client.AgentID) {
	f.args.SetAgentID(ArgFrom, v)
}

func (f TransferFromFunc) To(v client.AgentID) {
	f.args.SetAgentID(ArgTo, v)
}

func (f TransferFromFunc) TokenID(v client.Hash) {
	f.args.SetHash(ArgTokenID, v)
}

func (f TransferFromFunc) Post() {
	f.args.Mandatory(ArgFrom)
	f.args.Mandatory(ArgTo)
	f.args.Mandatory(ArgTokenID)
	f.svc.PostRequest("transferFrom", &f.args)
}

///////////////////////////// balanceOf /////////////////////////////

type BalanceOfView struct {
	svc  *client.Service
	args client.Arguments
}

func (f BalanceOfView) Owner(v client.AgentID) {
	f.args.SetAgentID(ArgOwner, v)
}

func (f BalanceOfView) Call() BalanceOfResults {
	f.args.Mandatory(ArgOwner)
	return BalanceOfResults{res: f.svc.CallView("balanceOf", &f.args)}
}

type BalanceOfResults struct {
	res client.Results
}

func (r BalanceOfResults) AmountExists() bool {
	return r.res.Exists(ResAmount)
}

func (r BalanceOfResults) Amount() uint64 {
	return r.res.GetUint64(ResAmount)
}

///////////////////////////// getApproved /////////////////////////////

type GetApprovedView struct {
	svc  *client.Service
	args client.Arguments
}

func (f GetApprovedView) TokenID(v client.Hash) {
	f.args.SetHash(ArgTokenID, v)
}

func (f GetApprovedView) Call() GetApprovedResults {
	f.args.Mandatory(ArgTokenID)
	return GetApprovedResults{res: f.svc.CallView("getApproved", &f.args)}
}

type GetApprovedResults struct {
	res client.Results
}

func (r GetApprovedResults) ApprovedExists() bool {
	return r.res.Exists(ResApproved)
}

func (r GetApprovedResults) Approved() client.AgentID {
	return r.res.GetAgentID(ResApproved)
}

///////////////////////////// isApprovedForAll /////////////////////////////

type IsApprovedForAllView struct {
	svc  *client.Service
	args client.Arguments
}

func (f IsApprovedForAllView) Operator(v client.AgentID) {
	f.args.SetAgentID(ArgOperator, v)
}

func (f IsApprovedForAllView) Owner(v client.AgentID) {
	f.args.SetAgentID(ArgOwner, v)
}

func (f IsApprovedForAllView) Call() IsApprovedForAllResults {
	f.args.Mandatory(ArgOperator)
	f.args.Mandatory(ArgOwner)
	return IsApprovedForAllResults{res: f.svc.CallView("isApprovedForAll", &f.args)}
}

type IsApprovedForAllResults struct {
	res client.Results
}

func (r IsApprovedForAllResults) ApprovalExists() bool {
	return r.res.Exists(ResApproval)
}

func (r IsApprovedForAllResults) Approval() bool {
	return r.res.GetBool(ResApproval)
}

///////////////////////////// name /////////////////////////////

type NameView struct {
	svc *client.Service
}

func (f NameView) Call() NameResults {
	return NameResults{res: f.svc.CallView("name", nil)}
}

type NameResults struct {
	res client.Results
}

func (r NameResults) Name() string {
	return r.res.GetString(ResName)
}

///////////////////////////// ownerOf /////////////////////////////

type OwnerOfView struct {
	svc  *client.Service
	args client.Arguments
}

func (f OwnerOfView) TokenID(v client.Hash) {
	f.args.SetHash(ArgTokenID, v)
}

func (f OwnerOfView) Call() OwnerOfResults {
	f.args.Mandatory(ArgTokenID)
	return OwnerOfResults{res: f.svc.CallView("ownerOf", &f.args)}
}

type OwnerOfResults struct {
	res client.Results
}

func (r OwnerOfResults) OwnerExists() bool {
	return r.res.Exists(ResOwner)
}

func (r OwnerOfResults) Owner() client.AgentID {
	return r.res.GetAgentID(ResOwner)
}

///////////////////////////// symbol /////////////////////////////

type SymbolView struct {
	svc *client.Service
}

func (f SymbolView) Call() SymbolResults {
	return SymbolResults{res: f.svc.CallView("symbol", nil)}
}

type SymbolResults struct {
	res client.Results
}

func (r SymbolResults) Symbol() string {
	return r.res.GetString(ResSymbol)
}

///////////////////////////// tokenURI /////////////////////////////

type TokenURIView struct {
	svc  *client.Service
	args client.Arguments
}

func (f TokenURIView) TokenID(v client.Hash) {
	f.args.SetHash(ArgTokenID, v)
}

func (f TokenURIView) Call() TokenURIResults {
	f.args.Mandatory(ArgTokenID)
	return TokenURIResults{res: f.svc.CallView("tokenURI", &f.args)}
}

type TokenURIResults struct {
	res client.Results
}

func (r TokenURIResults) TokenURIExists() bool {
	return r.res.Exists(ResTokenURI)
}

func (r TokenURIResults) TokenURI() string {
	return r.res.GetString(ResTokenURI)
}

///////////////////////////// Erc721Service /////////////////////////////

type Erc721Service struct {
	client.Service
}

func NewErc721Service(cl client.ServiceClient, chainID string) *Erc721Service {
	s := &Erc721Service{}
	s.Service.Init(cl, chainID, "d967c216", EventHandlers)
	return s
}

func (s *Erc721Service) Approve() ApproveFunc {
	return ApproveFunc{svc: &s.Service}
}

func (s *Erc721Service) Burn() BurnFunc {
	return BurnFunc{svc: &s.Service}
}

func (s *Erc721Service) Init() InitFunc {
	return InitFunc{svc: &s.Service}
}

func (s *Erc721Service) Mint() MintFunc {
	return MintFunc{svc: &s.Service}
}

func (s *Erc721Service) SafeTransferFrom() SafeTransferFromFunc {
	return SafeTransferFromFunc{svc: &s.Service}
}

func (s *Erc721Service) SetApprovalForAll() SetApprovalForAllFunc {
	return SetApprovalForAllFunc{svc: &s.Service}
}

func (s *Erc721Service) TransferFrom() TransferFromFunc {
	return TransferFromFunc{svc: &s.Service}
}

func (s *Erc721Service) BalanceOf() BalanceOfView {
	return BalanceOfView{svc: &s.Service}
}

func (s *Erc721Service) GetApproved() GetApprovedView {
	return GetApprovedView{svc: &s.Service}
}

func (s *Erc721Service) IsApprovedForAll() IsApprovedForAllView {
	return IsApprovedForAllView{svc: &s.Service}
}

func (s *Erc721Service) Name() NameView {
	return NameView{svc: &s.Service}
}

func (s *Erc721Service) OwnerOf() OwnerOfView {
	return OwnerOfView{svc: &s.Service}
}

func (s *Erc721Service) Symbol() SymbolView {
	return SymbolView{svc: &s.Service}
}

func (s *Erc721Service) TokenURI() TokenURIView {
	return TokenURIView{svc: &s.Service}
}

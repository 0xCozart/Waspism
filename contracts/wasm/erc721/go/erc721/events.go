// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:gocritic
package erc721

import (
	"github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib/wasmtypes"
)

type Erc721Events struct{}

func (e Erc721Events) Approval(approved wasmtypes.ScAgentID, owner wasmtypes.ScAgentID, tokenID wasmtypes.ScHash) {
	wasmlib.NewEventEncoder("erc721.approval").
		AgentID(approved).
		AgentID(owner).
		Hash(tokenID).
		Emit()
}

func (e Erc721Events) ApprovalForAll(approval bool, operator wasmtypes.ScAgentID, owner wasmtypes.ScAgentID) {
	wasmlib.NewEventEncoder("erc721.approvalForAll").
		Bool(approval).
		AgentID(operator).
		AgentID(owner).
		Emit()
}

func (e Erc721Events) Init(name string, symbol string) {
	wasmlib.NewEventEncoder("erc721.init").
		String(name).
		String(symbol).
		Emit()
}

func (e Erc721Events) Mint(balance uint64, owner wasmtypes.ScAgentID, tokenID wasmtypes.ScHash) {
	wasmlib.NewEventEncoder("erc721.mint").
		Uint64(balance).
		AgentID(owner).
		Hash(tokenID).
		Emit()
}

func (e Erc721Events) Transfer(from wasmtypes.ScAgentID, to wasmtypes.ScAgentID, tokenID wasmtypes.ScHash) {
	wasmlib.NewEventEncoder("erc721.transfer").
		AgentID(from).
		AgentID(to).
		Hash(tokenID).
		Emit()
}

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";

export class Auction {
    color         : wasmlib.ScColor = new wasmlib.ScColor(0);  // color of tokens for sale
    creator       : wasmlib.ScAgentID = new wasmlib.ScAgentID();  // issuer of start_auction transaction
    deposit       : u64 = 0;  // deposit by auction owner to cover the SC fees
    description   : string = "";  // auction description
    duration      : u32 = 0;  // auction duration in minutes
    highestBid    : u64 = 0;  // the current highest bid amount
    highestBidder : wasmlib.ScAgentID = new wasmlib.ScAgentID();  // the current highest bidder
    minimumBid    : u64 = 0;  // minimum bid amount
    numTokens     : u64 = 0;  // number of tokens for sale
    ownerMargin   : u64 = 0;  // auction owner's margin in promilles
    whenStarted   : u64 = 0;  // timestamp when auction started

    static fromBytes(bytes: u8[]): Auction {
        let decode = new wasmlib.BytesDecoder(bytes);
        let data = new Auction();
        data.color         = decode.color();
        data.creator       = decode.agentID();
        data.deposit       = decode.uint64();
        data.description   = decode.string();
        data.duration      = decode.uint32();
        data.highestBid    = decode.uint64();
        data.highestBidder = decode.agentID();
        data.minimumBid    = decode.uint64();
        data.numTokens     = decode.uint64();
        data.ownerMargin   = decode.uint64();
        data.whenStarted   = decode.uint64();
        decode.close();
        return data;
    }

    bytes(): u8[] {
        return new wasmlib.BytesEncoder().
		    color(this.color).
		    agentID(this.creator).
		    uint64(this.deposit).
		    string(this.description).
		    uint32(this.duration).
		    uint64(this.highestBid).
		    agentID(this.highestBidder).
		    uint64(this.minimumBid).
		    uint64(this.numTokens).
		    uint64(this.ownerMargin).
		    uint64(this.whenStarted).
            data();
    }
}

export class ImmutableAuction {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    value(): Auction {
        return Auction.fromBytes(wasmlib.getBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES));
    }
}

export class MutableAuction {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    delete(): void {
        wasmlib.delKey(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    setValue(value: Auction): void {
        wasmlib.setBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES, value.bytes());
    }

    value(): Auction {
        return Auction.fromBytes(wasmlib.getBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES));
    }
}

export class Bid {
    amount    : u64 = 0;  // cumulative amount of bids from same bidder
    index     : u32 = 0;  // index of bidder in bidder list
    timestamp : u64 = 0;  // timestamp of most recent bid

    static fromBytes(bytes: u8[]): Bid {
        let decode = new wasmlib.BytesDecoder(bytes);
        let data = new Bid();
        data.amount    = decode.uint64();
        data.index     = decode.uint32();
        data.timestamp = decode.uint64();
        decode.close();
        return data;
    }

    bytes(): u8[] {
        return new wasmlib.BytesEncoder().
		    uint64(this.amount).
		    uint32(this.index).
		    uint64(this.timestamp).
            data();
    }
}

export class ImmutableBid {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    value(): Bid {
        return Bid.fromBytes(wasmlib.getBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES));
    }
}

export class MutableBid {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    delete(): void {
        wasmlib.delKey(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    setValue(value: Bid): void {
        wasmlib.setBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES, value.bytes());
    }

    value(): Bid {
        return Bid.fromBytes(wasmlib.getBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES));
    }
}

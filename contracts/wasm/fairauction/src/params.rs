// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableFinalizeAuctionParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableFinalizeAuctionParams {
    pub fn token(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct MutableFinalizeAuctionParams {
	pub(crate) proxy: Proxy,
}

impl MutableFinalizeAuctionParams {
    pub fn token(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct ImmutablePlaceBidParams {
	pub(crate) proxy: Proxy,
}

impl ImmutablePlaceBidParams {
    pub fn token(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct MutablePlaceBidParams {
	pub(crate) proxy: Proxy,
}

impl MutablePlaceBidParams {
    pub fn token(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct ImmutableSetOwnerMarginParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetOwnerMarginParams {
    pub fn owner_margin(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_OWNER_MARGIN))
	}
}

#[derive(Clone)]
pub struct MutableSetOwnerMarginParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetOwnerMarginParams {
    pub fn owner_margin(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_OWNER_MARGIN))
	}
}

#[derive(Clone)]
pub struct ImmutableStartAuctionParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStartAuctionParams {
    pub fn description(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_DESCRIPTION))
	}

    pub fn duration(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_DURATION))
	}

    pub fn minimum_bid(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_MINIMUM_BID))
	}

    pub fn token(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct MutableStartAuctionParams {
	pub(crate) proxy: Proxy,
}

impl MutableStartAuctionParams {
    pub fn description(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_DESCRIPTION))
	}

    pub fn duration(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_DURATION))
	}

    pub fn minimum_bid(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_MINIMUM_BID))
	}

    pub fn token(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct ImmutableGetInfoParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetInfoParams {
    pub fn token(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct MutableGetInfoParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetInfoParams {
    pub fn token(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct MapTokenIDToImmutableAuction {
	pub(crate) proxy: Proxy,
}

impl MapTokenIDToImmutableAuction {
    pub fn get_auction(&self, key: &ScTokenID) -> ImmutableAuction {
        ImmutableAuction { proxy: self.proxy.key(&token_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapTokenIDToImmutableBidderList {
	pub(crate) proxy: Proxy,
}

impl MapTokenIDToImmutableBidderList {
    pub fn get_bidder_list(&self, key: &ScTokenID) -> ImmutableBidderList {
        ImmutableBidderList { proxy: self.proxy.key(&token_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapTokenIDToImmutableBids {
	pub(crate) proxy: Proxy,
}

impl MapTokenIDToImmutableBids {
    pub fn get_bids(&self, key: &ScTokenID) -> ImmutableBids {
        ImmutableBids { proxy: self.proxy.key(&token_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct ImmutableFairAuctionState {
	pub(crate) proxy: Proxy,
}

impl ImmutableFairAuctionState {
    pub fn auctions(&self) -> MapTokenIDToImmutableAuction {
		MapTokenIDToImmutableAuction { proxy: self.proxy.root(STATE_AUCTIONS) }
	}

    pub fn bidder_list(&self) -> MapTokenIDToImmutableBidderList {
		MapTokenIDToImmutableBidderList { proxy: self.proxy.root(STATE_BIDDER_LIST) }
	}

    pub fn bids(&self) -> MapTokenIDToImmutableBids {
		MapTokenIDToImmutableBids { proxy: self.proxy.root(STATE_BIDS) }
	}

    // default auction owner's margin in promilles
    pub fn owner_margin(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(STATE_OWNER_MARGIN))
	}
}

#[derive(Clone)]
pub struct MapTokenIDToMutableAuction {
	pub(crate) proxy: Proxy,
}

impl MapTokenIDToMutableAuction {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_auction(&self, key: &ScTokenID) -> MutableAuction {
        MutableAuction { proxy: self.proxy.key(&token_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapTokenIDToMutableBidderList {
	pub(crate) proxy: Proxy,
}

impl MapTokenIDToMutableBidderList {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_bidder_list(&self, key: &ScTokenID) -> MutableBidderList {
        MutableBidderList { proxy: self.proxy.key(&token_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapTokenIDToMutableBids {
	pub(crate) proxy: Proxy,
}

impl MapTokenIDToMutableBids {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_bids(&self, key: &ScTokenID) -> MutableBids {
        MutableBids { proxy: self.proxy.key(&token_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MutableFairAuctionState {
	pub(crate) proxy: Proxy,
}

impl MutableFairAuctionState {
    pub fn as_immutable(&self) -> ImmutableFairAuctionState {
		ImmutableFairAuctionState { proxy: self.proxy.root("") }
	}

    pub fn auctions(&self) -> MapTokenIDToMutableAuction {
		MapTokenIDToMutableAuction { proxy: self.proxy.root(STATE_AUCTIONS) }
	}

    pub fn bidder_list(&self) -> MapTokenIDToMutableBidderList {
		MapTokenIDToMutableBidderList { proxy: self.proxy.root(STATE_BIDDER_LIST) }
	}

    pub fn bids(&self) -> MapTokenIDToMutableBids {
		MapTokenIDToMutableBids { proxy: self.proxy.root(STATE_BIDS) }
	}

    // default auction owner's margin in promilles
    pub fn owner_margin(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(STATE_OWNER_MARGIN))
	}
}

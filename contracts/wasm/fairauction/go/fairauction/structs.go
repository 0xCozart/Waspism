// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package fairauction

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib/wasmtypes"

type Auction struct {
	Color         wasmtypes.ScColor   // color of tokens for sale
	Creator       wasmtypes.ScAgentID // issuer of start_auction transaction
	Deposit       uint64              // deposit by auction owner to cover the SC fees
	Description   string              // auction description
	Duration      uint32              // auction duration in minutes
	HighestBid    uint64              // the current highest bid amount
	HighestBidder wasmtypes.ScAgentID // the current highest bidder
	MinimumBid    uint64              // minimum bid amount
	NumTokens     uint64              // number of tokens for sale
	OwnerMargin   uint64              // auction owner's margin in promilles
	WhenStarted   uint64              // timestamp when auction started
}

func NewAuctionFromBytes(buf []byte) *Auction {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Auction{}
	data.Color = wasmtypes.DecodeColor(dec)
	data.Creator = wasmtypes.DecodeAgentID(dec)
	data.Deposit = wasmtypes.DecodeUint64(dec)
	data.Description = wasmtypes.DecodeString(dec)
	data.Duration = wasmtypes.DecodeUint32(dec)
	data.HighestBid = wasmtypes.DecodeUint64(dec)
	data.HighestBidder = wasmtypes.DecodeAgentID(dec)
	data.MinimumBid = wasmtypes.DecodeUint64(dec)
	data.NumTokens = wasmtypes.DecodeUint64(dec)
	data.OwnerMargin = wasmtypes.DecodeUint64(dec)
	data.WhenStarted = wasmtypes.DecodeUint64(dec)
	dec.Close()
	return data
}

func (o *Auction) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.EncodeColor(enc, o.Color)
	wasmtypes.EncodeAgentID(enc, o.Creator)
	wasmtypes.EncodeUint64(enc, o.Deposit)
	wasmtypes.EncodeString(enc, o.Description)
	wasmtypes.EncodeUint32(enc, o.Duration)
	wasmtypes.EncodeUint64(enc, o.HighestBid)
	wasmtypes.EncodeAgentID(enc, o.HighestBidder)
	wasmtypes.EncodeUint64(enc, o.MinimumBid)
	wasmtypes.EncodeUint64(enc, o.NumTokens)
	wasmtypes.EncodeUint64(enc, o.OwnerMargin)
	wasmtypes.EncodeUint64(enc, o.WhenStarted)
	return enc.Buf()
}

type ImmutableAuction struct {
	proxy wasmtypes.Proxy
}

func (o ImmutableAuction) Exists() bool {
	return o.proxy.Exists()
}

func (o ImmutableAuction) Value() *Auction {
	return NewAuctionFromBytes(o.proxy.Get())
}

type MutableAuction struct {
	proxy wasmtypes.Proxy
}

func (o MutableAuction) Delete() {
	o.proxy.Delete()
}

func (o MutableAuction) Exists() bool {
	return o.proxy.Exists()
}

func (o MutableAuction) SetValue(value *Auction) {
	o.proxy.Set(value.Bytes())
}

func (o MutableAuction) Value() *Auction {
	return NewAuctionFromBytes(o.proxy.Get())
}

type Bid struct {
	Amount    uint64 // cumulative amount of bids from same bidder
	Index     uint32 // index of bidder in bidder list
	Timestamp uint64 // timestamp of most recent bid
}

func NewBidFromBytes(buf []byte) *Bid {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Bid{}
	data.Amount = wasmtypes.DecodeUint64(dec)
	data.Index = wasmtypes.DecodeUint32(dec)
	data.Timestamp = wasmtypes.DecodeUint64(dec)
	dec.Close()
	return data
}

func (o *Bid) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.EncodeUint64(enc, o.Amount)
	wasmtypes.EncodeUint32(enc, o.Index)
	wasmtypes.EncodeUint64(enc, o.Timestamp)
	return enc.Buf()
}

type ImmutableBid struct {
	proxy wasmtypes.Proxy
}

func (o ImmutableBid) Exists() bool {
	return o.proxy.Exists()
}

func (o ImmutableBid) Value() *Bid {
	return NewBidFromBytes(o.proxy.Get())
}

type MutableBid struct {
	proxy wasmtypes.Proxy
}

func (o MutableBid) Delete() {
	o.proxy.Delete()
}

func (o MutableBid) Exists() bool {
	return o.proxy.Exists()
}

func (o MutableBid) SetValue(value *Bid) {
	o.proxy.Set(value.Bytes())
}

func (o MutableBid) Value() *Bid {
	return NewBidFromBytes(o.proxy.Get())
}

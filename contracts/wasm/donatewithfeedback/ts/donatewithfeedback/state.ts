// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class ArrayOfImmutableDonation {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): u32 {
        return wasmlib.getLength(this.objID);
    }

	getDonation(index: u32): sc.ImmutableDonation {
		return new sc.ImmutableDonation(this.objID, new wasmlib.Key32(index as i32));
	}
}

export class ImmutableDonateWithFeedbackState extends wasmlib.ScMapID {
    log(): sc.ArrayOfImmutableDonation {
		let arrID = wasmlib.getObjectID(this.mapID, wasmlib.Key32.fromString(sc.StateLog), wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfImmutableDonation(arrID);
	}

    maxDonation(): wasmlib.ScImmutableUint64 {
		return new wasmlib.ScImmutableUint64(this.mapID, wasmlib.Key32.fromString(sc.StateMaxDonation));
	}

    totalDonation(): wasmlib.ScImmutableUint64 {
		return new wasmlib.ScImmutableUint64(this.mapID, wasmlib.Key32.fromString(sc.StateTotalDonation));
	}
}

export class ArrayOfMutableDonation {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): u32 {
        return wasmlib.getLength(this.objID);
    }

	getDonation(index: u32): sc.MutableDonation {
		return new sc.MutableDonation(this.objID, new wasmlib.Key32(index as i32));
	}
}

export class MutableDonateWithFeedbackState extends wasmlib.ScMapID {
    asImmutable(): sc.ImmutableDonateWithFeedbackState {
		const imm = new sc.ImmutableDonateWithFeedbackState();
		imm.mapID = this.mapID;
		return imm;
	}

    log(): sc.ArrayOfMutableDonation {
		let arrID = wasmlib.getObjectID(this.mapID, wasmlib.Key32.fromString(sc.StateLog), wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfMutableDonation(arrID);
	}

    maxDonation(): wasmlib.ScMutableUint64 {
		return new wasmlib.ScMutableUint64(this.mapID, wasmlib.Key32.fromString(sc.StateMaxDonation));
	}

    totalDonation(): wasmlib.ScMutableUint64 {
		return new wasmlib.ScMutableUint64(this.mapID, wasmlib.Key32.fromString(sc.StateTotalDonation));
	}
}

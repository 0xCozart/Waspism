// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class ArrayOfImmutableAddress {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): u32 {
        return wasmlib.getLength(this.objID);
    }

    getAddress(index: u32): wasmlib.ScImmutableAddress {
        return new wasmlib.ScImmutableAddress(this.objID, new wasmlib.Key32(index as i32));
    }
}

export class MapAddressToImmutableUint64 {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    getUint64(key: wasmlib.ScAddress): wasmlib.ScImmutableUint64 {
        return new wasmlib.ScImmutableUint64(this.objID, key.getKeyID());
    }
}

export class ImmutableDividendState extends wasmlib.ScMapID {
    memberList(): sc.ArrayOfImmutableAddress {
		let arrID = wasmlib.getObjectID(this.mapID, wasmlib.Key32.fromString(sc.StateMemberList), wasmlib.TYPE_ARRAY|wasmlib.TYPE_ADDRESS);
		return new sc.ArrayOfImmutableAddress(arrID);
	}

    members(): sc.MapAddressToImmutableUint64 {
		let mapID = wasmlib.getObjectID(this.mapID, wasmlib.Key32.fromString(sc.StateMembers), wasmlib.TYPE_MAP);
		return new sc.MapAddressToImmutableUint64(mapID);
	}

    owner(): wasmlib.ScImmutableAgentID {
		return new wasmlib.ScImmutableAgentID(this.mapID, wasmlib.Key32.fromString(sc.StateOwner));
	}

    totalFactor(): wasmlib.ScImmutableUint64 {
		return new wasmlib.ScImmutableUint64(this.mapID, wasmlib.Key32.fromString(sc.StateTotalFactor));
	}
}

export class ArrayOfMutableAddress {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): u32 {
        return wasmlib.getLength(this.objID);
    }

    getAddress(index: u32): wasmlib.ScMutableAddress {
        return new wasmlib.ScMutableAddress(this.objID, new wasmlib.Key32(index as i32));
    }
}

export class MapAddressToMutableUint64 {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    getUint64(key: wasmlib.ScAddress): wasmlib.ScMutableUint64 {
        return new wasmlib.ScMutableUint64(this.objID, key.getKeyID());
    }
}

export class MutableDividendState extends wasmlib.ScMapID {
    asImmutable(): sc.ImmutableDividendState {
		const imm = new sc.ImmutableDividendState();
		imm.mapID = this.mapID;
		return imm;
	}

    memberList(): sc.ArrayOfMutableAddress {
		let arrID = wasmlib.getObjectID(this.mapID, wasmlib.Key32.fromString(sc.StateMemberList), wasmlib.TYPE_ARRAY|wasmlib.TYPE_ADDRESS);
		return new sc.ArrayOfMutableAddress(arrID);
	}

    members(): sc.MapAddressToMutableUint64 {
		let mapID = wasmlib.getObjectID(this.mapID, wasmlib.Key32.fromString(sc.StateMembers), wasmlib.TYPE_MAP);
		return new sc.MapAddressToMutableUint64(mapID);
	}

    owner(): wasmlib.ScMutableAgentID {
		return new wasmlib.ScMutableAgentID(this.mapID, wasmlib.Key32.fromString(sc.StateOwner));
	}

    totalFactor(): wasmlib.ScMutableUint64 {
		return new wasmlib.ScMutableUint64(this.mapID, wasmlib.Key32.fromString(sc.StateTotalFactor));
	}
}

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::typedefs::*;

#[derive(Clone, Copy)]
pub struct MapAgentIDToImmutableAllowancesForAgent {
	pub(crate) obj_id: i32,
}

impl MapAgentIDToImmutableAllowancesForAgent {
    pub fn get_allowances_for_agent(&self, key: &ScAgentID) -> ImmutableAllowancesForAgent {
        let sub_id = get_object_id(self.obj_id, key.get_key_id(), TYPE_MAP);
        ImmutableAllowancesForAgent { obj_id: sub_id }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableErc20State {
    pub(crate) id: i32,
}

impl ImmutableErc20State {
    pub fn all_allowances(&self) -> MapAgentIDToImmutableAllowancesForAgent {
		let map_id = get_object_id(self.id, STATE_ALL_ALLOWANCES.get_key_id(), TYPE_MAP);
		MapAgentIDToImmutableAllowancesForAgent { obj_id: map_id }
	}

    pub fn balances(&self) -> MapAgentIDToImmutableUint64 {
		let map_id = get_object_id(self.id, STATE_BALANCES.get_key_id(), TYPE_MAP);
		MapAgentIDToImmutableUint64 { obj_id: map_id }
	}

    pub fn supply(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.id, STATE_SUPPLY.get_key_id())
	}
}

#[derive(Clone, Copy)]
pub struct MapAgentIDToMutableAllowancesForAgent {
	pub(crate) obj_id: i32,
}

impl MapAgentIDToMutableAllowancesForAgent {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn get_allowances_for_agent(&self, key: &ScAgentID) -> MutableAllowancesForAgent {
        let sub_id = get_object_id(self.obj_id, key.get_key_id(), TYPE_MAP);
        MutableAllowancesForAgent { obj_id: sub_id }
    }
}

#[derive(Clone, Copy)]
pub struct MutableErc20State {
    pub(crate) id: i32,
}

impl MutableErc20State {
    pub fn as_immutable(&self) -> ImmutableErc20State {
		ImmutableErc20State { id: self.id }
	}

    pub fn all_allowances(&self) -> MapAgentIDToMutableAllowancesForAgent {
		let map_id = get_object_id(self.id, STATE_ALL_ALLOWANCES.get_key_id(), TYPE_MAP);
		MapAgentIDToMutableAllowancesForAgent { obj_id: map_id }
	}

    pub fn balances(&self) -> MapAgentIDToMutableUint64 {
		let map_id = get_object_id(self.id, STATE_BALANCES.get_key_id(), TYPE_MAP);
		MapAgentIDToMutableUint64 { obj_id: map_id }
	}

    pub fn supply(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.id, STATE_SUPPLY.get_key_id())
	}
}

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableTakeBalanceResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableTakeBalanceResults {
    pub fn iotas(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_IOTAS))
	}
}

#[derive(Clone)]
pub struct MutableTakeBalanceResults {
	pub(crate) proxy: Proxy,
}

impl MutableTakeBalanceResults {
    pub fn iotas(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_IOTAS))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressArrayLengthResults {
    pub fn length(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressArrayLengthResults {
    pub fn length(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressArrayValueResults {
    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(RESULT_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressArrayValueResults {
    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(RESULT_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressMapValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressMapValueResults {
    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(RESULT_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressMapValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressMapValueResults {
    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(RESULT_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfAddressArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfAddressArrayLengthResults {
    pub fn length(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfAddressArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfAddressArrayLengthResults {
    pub fn length(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfAddressArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfAddressArrayValueResults {
    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(RESULT_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfAddressArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfAddressArrayValueResults {
    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(RESULT_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfAddressMapValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfAddressMapValueResults {
    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(RESULT_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfAddressMapValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfAddressMapValueResults {
    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(RESULT_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfStringArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfStringArrayLengthResults {
    pub fn length(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfStringArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfStringArrayLengthResults {
    pub fn length(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfStringArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfStringArrayValueResults {
    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfStringArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfStringArrayValueResults {
    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfStringMapValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfStringMapValueResults {
    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfStringMapValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfStringMapValueResults {
    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableBlockRecordResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableBlockRecordResults {
    pub fn record(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(RESULT_RECORD))
	}
}

#[derive(Clone)]
pub struct MutableBlockRecordResults {
	pub(crate) proxy: Proxy,
}

impl MutableBlockRecordResults {
    pub fn record(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(RESULT_RECORD))
	}
}

#[derive(Clone)]
pub struct ImmutableBlockRecordsResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableBlockRecordsResults {
    pub fn count(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_COUNT))
	}
}

#[derive(Clone)]
pub struct MutableBlockRecordsResults {
	pub(crate) proxy: Proxy,
}

impl MutableBlockRecordsResults {
    pub fn count(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_COUNT))
	}
}

#[derive(Clone)]
pub struct ImmutableGetRandomResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetRandomResults {
    pub fn random(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_RANDOM))
	}
}

#[derive(Clone)]
pub struct MutableGetRandomResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetRandomResults {
    pub fn random(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_RANDOM))
	}
}

#[derive(Clone)]
pub struct ImmutableIotaBalanceResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableIotaBalanceResults {
    pub fn iotas(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_IOTAS))
	}
}

#[derive(Clone)]
pub struct MutableIotaBalanceResults {
	pub(crate) proxy: Proxy,
}

impl MutableIotaBalanceResults {
    pub fn iotas(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_IOTAS))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringArrayLengthResults {
    pub fn length(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringArrayLengthResults {
    pub fn length(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringArrayValueResults {
    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringArrayValueResults {
    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringMapValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringMapValueResults {
    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringMapValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringMapValueResults {
    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

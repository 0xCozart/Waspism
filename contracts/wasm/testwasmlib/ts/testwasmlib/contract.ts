// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class AddressMapOfAddressArrayAppendCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddressMapOfAddressArrayAppend);
	params: sc.MutableAddressMapOfAddressArrayAppendParams = new sc.MutableAddressMapOfAddressArrayAppendParams(wasmlib.ScView.nilProxy);
}

export class AddressMapOfAddressArrayAppendContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressArrayAppendParams = new sc.ImmutableAddressMapOfAddressArrayAppendParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressArrayClearCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddressMapOfAddressArrayClear);
	params: sc.MutableAddressMapOfAddressArrayClearParams = new sc.MutableAddressMapOfAddressArrayClearParams(wasmlib.ScView.nilProxy);
}

export class AddressMapOfAddressArrayClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressArrayClearParams = new sc.ImmutableAddressMapOfAddressArrayClearParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressArraySetCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddressMapOfAddressArraySet);
	params: sc.MutableAddressMapOfAddressArraySetParams = new sc.MutableAddressMapOfAddressArraySetParams(wasmlib.ScView.nilProxy);
}

export class AddressMapOfAddressArraySetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressArraySetParams = new sc.ImmutableAddressMapOfAddressArraySetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressMapClearCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddressMapOfAddressMapClear);
	params: sc.MutableAddressMapOfAddressMapClearParams = new sc.MutableAddressMapOfAddressMapClearParams(wasmlib.ScView.nilProxy);
}

export class AddressMapOfAddressMapClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressMapClearParams = new sc.ImmutableAddressMapOfAddressMapClearParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressMapSetCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddressMapOfAddressMapSet);
	params: sc.MutableAddressMapOfAddressMapSetParams = new sc.MutableAddressMapOfAddressMapSetParams(wasmlib.ScView.nilProxy);
}

export class AddressMapOfAddressMapSetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressMapSetParams = new sc.ImmutableAddressMapOfAddressMapSetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArrayAppendCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfAddressArrayAppend);
	params: sc.MutableArrayOfAddressArrayAppendParams = new sc.MutableArrayOfAddressArrayAppendParams(wasmlib.ScView.nilProxy);
}

export class ArrayOfAddressArrayAppendContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfAddressArrayAppendParams = new sc.ImmutableArrayOfAddressArrayAppendParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArrayClearCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfAddressArrayClear);
}

export class ArrayOfAddressArrayClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArraySetCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfAddressArraySet);
	params: sc.MutableArrayOfAddressArraySetParams = new sc.MutableArrayOfAddressArraySetParams(wasmlib.ScView.nilProxy);
}

export class ArrayOfAddressArraySetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfAddressArraySetParams = new sc.ImmutableArrayOfAddressArraySetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressMapClearCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfAddressMapClear);
}

export class ArrayOfAddressMapClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressMapSetCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfAddressMapSet);
	params: sc.MutableArrayOfAddressMapSetParams = new sc.MutableArrayOfAddressMapSetParams(wasmlib.ScView.nilProxy);
}

export class ArrayOfAddressMapSetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfAddressMapSetParams = new sc.ImmutableArrayOfAddressMapSetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArrayAppendCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfStringArrayAppend);
	params: sc.MutableArrayOfStringArrayAppendParams = new sc.MutableArrayOfStringArrayAppendParams(wasmlib.ScView.nilProxy);
}

export class ArrayOfStringArrayAppendContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfStringArrayAppendParams = new sc.ImmutableArrayOfStringArrayAppendParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArrayClearCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfStringArrayClear);
}

export class ArrayOfStringArrayClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArraySetCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfStringArraySet);
	params: sc.MutableArrayOfStringArraySetParams = new sc.MutableArrayOfStringArraySetParams(wasmlib.ScView.nilProxy);
}

export class ArrayOfStringArraySetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfStringArraySetParams = new sc.ImmutableArrayOfStringArraySetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringMapClearCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfStringMapClear);
}

export class ArrayOfStringMapClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringMapSetCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncArrayOfStringMapSet);
	params: sc.MutableArrayOfStringMapSetParams = new sc.MutableArrayOfStringMapSetParams(wasmlib.ScView.nilProxy);
}

export class ArrayOfStringMapSetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfStringMapSetParams = new sc.ImmutableArrayOfStringMapSetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ParamTypesCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncParamTypes);
	params: sc.MutableParamTypesParams = new sc.MutableParamTypesParams(wasmlib.ScView.nilProxy);
}

export class ParamTypesContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableParamTypesParams = new sc.ImmutableParamTypesParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class RandomCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncRandom);
}

export class RandomContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArrayAppendCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncStringMapOfStringArrayAppend);
	params: sc.MutableStringMapOfStringArrayAppendParams = new sc.MutableStringMapOfStringArrayAppendParams(wasmlib.ScView.nilProxy);
}

export class StringMapOfStringArrayAppendContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringArrayAppendParams = new sc.ImmutableStringMapOfStringArrayAppendParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArrayClearCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncStringMapOfStringArrayClear);
	params: sc.MutableStringMapOfStringArrayClearParams = new sc.MutableStringMapOfStringArrayClearParams(wasmlib.ScView.nilProxy);
}

export class StringMapOfStringArrayClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringArrayClearParams = new sc.ImmutableStringMapOfStringArrayClearParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArraySetCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncStringMapOfStringArraySet);
	params: sc.MutableStringMapOfStringArraySetParams = new sc.MutableStringMapOfStringArraySetParams(wasmlib.ScView.nilProxy);
}

export class StringMapOfStringArraySetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringArraySetParams = new sc.ImmutableStringMapOfStringArraySetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringMapClearCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncStringMapOfStringMapClear);
	params: sc.MutableStringMapOfStringMapClearParams = new sc.MutableStringMapOfStringMapClearParams(wasmlib.ScView.nilProxy);
}

export class StringMapOfStringMapClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringMapClearParams = new sc.ImmutableStringMapOfStringMapClearParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringMapSetCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncStringMapOfStringMapSet);
	params: sc.MutableStringMapOfStringMapSetParams = new sc.MutableStringMapOfStringMapSetParams(wasmlib.ScView.nilProxy);
}

export class StringMapOfStringMapSetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringMapSetParams = new sc.ImmutableStringMapOfStringMapSetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class TakeAllowanceCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTakeAllowance);
}

export class TakeAllowanceContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class TakeBalanceCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTakeBalance);
	results: sc.ImmutableTakeBalanceResults = new sc.ImmutableTakeBalanceResults(wasmlib.ScView.nilProxy);
}

export class TakeBalanceContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	results: sc.MutableTakeBalanceResults = new sc.MutableTakeBalanceResults(wasmlib.ScView.nilProxy);
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class TriggerEventCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTriggerEvent);
	params: sc.MutableTriggerEventParams = new sc.MutableTriggerEventParams(wasmlib.ScView.nilProxy);
}

export class TriggerEventContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableTriggerEventParams = new sc.ImmutableTriggerEventParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressArrayLengthCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewAddressMapOfAddressArrayLength);
	params: sc.MutableAddressMapOfAddressArrayLengthParams = new sc.MutableAddressMapOfAddressArrayLengthParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableAddressMapOfAddressArrayLengthResults = new sc.ImmutableAddressMapOfAddressArrayLengthResults(wasmlib.ScView.nilProxy);
}

export class AddressMapOfAddressArrayLengthContext {
	params: sc.ImmutableAddressMapOfAddressArrayLengthParams = new sc.ImmutableAddressMapOfAddressArrayLengthParams(wasmlib.paramsProxy());
	results: sc.MutableAddressMapOfAddressArrayLengthResults = new sc.MutableAddressMapOfAddressArrayLengthResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressArrayValueCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewAddressMapOfAddressArrayValue);
	params: sc.MutableAddressMapOfAddressArrayValueParams = new sc.MutableAddressMapOfAddressArrayValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableAddressMapOfAddressArrayValueResults = new sc.ImmutableAddressMapOfAddressArrayValueResults(wasmlib.ScView.nilProxy);
}

export class AddressMapOfAddressArrayValueContext {
	params: sc.ImmutableAddressMapOfAddressArrayValueParams = new sc.ImmutableAddressMapOfAddressArrayValueParams(wasmlib.paramsProxy());
	results: sc.MutableAddressMapOfAddressArrayValueResults = new sc.MutableAddressMapOfAddressArrayValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressMapValueCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewAddressMapOfAddressMapValue);
	params: sc.MutableAddressMapOfAddressMapValueParams = new sc.MutableAddressMapOfAddressMapValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableAddressMapOfAddressMapValueResults = new sc.ImmutableAddressMapOfAddressMapValueResults(wasmlib.ScView.nilProxy);
}

export class AddressMapOfAddressMapValueContext {
	params: sc.ImmutableAddressMapOfAddressMapValueParams = new sc.ImmutableAddressMapOfAddressMapValueParams(wasmlib.paramsProxy());
	results: sc.MutableAddressMapOfAddressMapValueResults = new sc.MutableAddressMapOfAddressMapValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArrayLengthCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewArrayOfAddressArrayLength);
	results: sc.ImmutableArrayOfAddressArrayLengthResults = new sc.ImmutableArrayOfAddressArrayLengthResults(wasmlib.ScView.nilProxy);
}

export class ArrayOfAddressArrayLengthContext {
	results: sc.MutableArrayOfAddressArrayLengthResults = new sc.MutableArrayOfAddressArrayLengthResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArrayValueCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewArrayOfAddressArrayValue);
	params: sc.MutableArrayOfAddressArrayValueParams = new sc.MutableArrayOfAddressArrayValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableArrayOfAddressArrayValueResults = new sc.ImmutableArrayOfAddressArrayValueResults(wasmlib.ScView.nilProxy);
}

export class ArrayOfAddressArrayValueContext {
	params: sc.ImmutableArrayOfAddressArrayValueParams = new sc.ImmutableArrayOfAddressArrayValueParams(wasmlib.paramsProxy());
	results: sc.MutableArrayOfAddressArrayValueResults = new sc.MutableArrayOfAddressArrayValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressMapValueCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewArrayOfAddressMapValue);
	params: sc.MutableArrayOfAddressMapValueParams = new sc.MutableArrayOfAddressMapValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableArrayOfAddressMapValueResults = new sc.ImmutableArrayOfAddressMapValueResults(wasmlib.ScView.nilProxy);
}

export class ArrayOfAddressMapValueContext {
	params: sc.ImmutableArrayOfAddressMapValueParams = new sc.ImmutableArrayOfAddressMapValueParams(wasmlib.paramsProxy());
	results: sc.MutableArrayOfAddressMapValueResults = new sc.MutableArrayOfAddressMapValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArrayLengthCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewArrayOfStringArrayLength);
	results: sc.ImmutableArrayOfStringArrayLengthResults = new sc.ImmutableArrayOfStringArrayLengthResults(wasmlib.ScView.nilProxy);
}

export class ArrayOfStringArrayLengthContext {
	results: sc.MutableArrayOfStringArrayLengthResults = new sc.MutableArrayOfStringArrayLengthResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArrayValueCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewArrayOfStringArrayValue);
	params: sc.MutableArrayOfStringArrayValueParams = new sc.MutableArrayOfStringArrayValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableArrayOfStringArrayValueResults = new sc.ImmutableArrayOfStringArrayValueResults(wasmlib.ScView.nilProxy);
}

export class ArrayOfStringArrayValueContext {
	params: sc.ImmutableArrayOfStringArrayValueParams = new sc.ImmutableArrayOfStringArrayValueParams(wasmlib.paramsProxy());
	results: sc.MutableArrayOfStringArrayValueResults = new sc.MutableArrayOfStringArrayValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringMapValueCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewArrayOfStringMapValue);
	params: sc.MutableArrayOfStringMapValueParams = new sc.MutableArrayOfStringMapValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableArrayOfStringMapValueResults = new sc.ImmutableArrayOfStringMapValueResults(wasmlib.ScView.nilProxy);
}

export class ArrayOfStringMapValueContext {
	params: sc.ImmutableArrayOfStringMapValueParams = new sc.ImmutableArrayOfStringMapValueParams(wasmlib.paramsProxy());
	results: sc.MutableArrayOfStringMapValueResults = new sc.MutableArrayOfStringMapValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntAddCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBigIntAdd);
	params: sc.MutableBigIntAddParams = new sc.MutableBigIntAddParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntAddResults = new sc.ImmutableBigIntAddResults(wasmlib.ScView.nilProxy);
}

export class BigIntAddContext {
	params: sc.ImmutableBigIntAddParams = new sc.ImmutableBigIntAddParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntAddResults = new sc.MutableBigIntAddResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntDivCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBigIntDiv);
	params: sc.MutableBigIntDivParams = new sc.MutableBigIntDivParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntDivResults = new sc.ImmutableBigIntDivResults(wasmlib.ScView.nilProxy);
}

export class BigIntDivContext {
	params: sc.ImmutableBigIntDivParams = new sc.ImmutableBigIntDivParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntDivResults = new sc.MutableBigIntDivResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntModCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBigIntMod);
	params: sc.MutableBigIntModParams = new sc.MutableBigIntModParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntModResults = new sc.ImmutableBigIntModResults(wasmlib.ScView.nilProxy);
}

export class BigIntModContext {
	params: sc.ImmutableBigIntModParams = new sc.ImmutableBigIntModParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntModResults = new sc.MutableBigIntModResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntMulCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBigIntMul);
	params: sc.MutableBigIntMulParams = new sc.MutableBigIntMulParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntMulResults = new sc.ImmutableBigIntMulResults(wasmlib.ScView.nilProxy);
}

export class BigIntMulContext {
	params: sc.ImmutableBigIntMulParams = new sc.ImmutableBigIntMulParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntMulResults = new sc.MutableBigIntMulResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntSubCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBigIntSub);
	params: sc.MutableBigIntSubParams = new sc.MutableBigIntSubParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntSubResults = new sc.ImmutableBigIntSubResults(wasmlib.ScView.nilProxy);
}

export class BigIntSubContext {
	params: sc.ImmutableBigIntSubParams = new sc.ImmutableBigIntSubParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntSubResults = new sc.MutableBigIntSubResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BlockRecordCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBlockRecord);
	params: sc.MutableBlockRecordParams = new sc.MutableBlockRecordParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBlockRecordResults = new sc.ImmutableBlockRecordResults(wasmlib.ScView.nilProxy);
}

export class BlockRecordContext {
	params: sc.ImmutableBlockRecordParams = new sc.ImmutableBlockRecordParams(wasmlib.paramsProxy());
	results: sc.MutableBlockRecordResults = new sc.MutableBlockRecordResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BlockRecordsCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBlockRecords);
	params: sc.MutableBlockRecordsParams = new sc.MutableBlockRecordsParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBlockRecordsResults = new sc.ImmutableBlockRecordsResults(wasmlib.ScView.nilProxy);
}

export class BlockRecordsContext {
	params: sc.ImmutableBlockRecordsParams = new sc.ImmutableBlockRecordsParams(wasmlib.paramsProxy());
	results: sc.MutableBlockRecordsResults = new sc.MutableBlockRecordsResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class GetRandomCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetRandom);
	results: sc.ImmutableGetRandomResults = new sc.ImmutableGetRandomResults(wasmlib.ScView.nilProxy);
}

export class GetRandomContext {
	results: sc.MutableGetRandomResults = new sc.MutableGetRandomResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class IotaBalanceCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewIotaBalance);
	results: sc.ImmutableIotaBalanceResults = new sc.ImmutableIotaBalanceResults(wasmlib.ScView.nilProxy);
}

export class IotaBalanceContext {
	results: sc.MutableIotaBalanceResults = new sc.MutableIotaBalanceResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArrayLengthCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewStringMapOfStringArrayLength);
	params: sc.MutableStringMapOfStringArrayLengthParams = new sc.MutableStringMapOfStringArrayLengthParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableStringMapOfStringArrayLengthResults = new sc.ImmutableStringMapOfStringArrayLengthResults(wasmlib.ScView.nilProxy);
}

export class StringMapOfStringArrayLengthContext {
	params: sc.ImmutableStringMapOfStringArrayLengthParams = new sc.ImmutableStringMapOfStringArrayLengthParams(wasmlib.paramsProxy());
	results: sc.MutableStringMapOfStringArrayLengthResults = new sc.MutableStringMapOfStringArrayLengthResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArrayValueCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewStringMapOfStringArrayValue);
	params: sc.MutableStringMapOfStringArrayValueParams = new sc.MutableStringMapOfStringArrayValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableStringMapOfStringArrayValueResults = new sc.ImmutableStringMapOfStringArrayValueResults(wasmlib.ScView.nilProxy);
}

export class StringMapOfStringArrayValueContext {
	params: sc.ImmutableStringMapOfStringArrayValueParams = new sc.ImmutableStringMapOfStringArrayValueParams(wasmlib.paramsProxy());
	results: sc.MutableStringMapOfStringArrayValueResults = new sc.MutableStringMapOfStringArrayValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringMapValueCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewStringMapOfStringMapValue);
	params: sc.MutableStringMapOfStringMapValueParams = new sc.MutableStringMapOfStringMapValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableStringMapOfStringMapValueResults = new sc.ImmutableStringMapOfStringMapValueResults(wasmlib.ScView.nilProxy);
}

export class StringMapOfStringMapValueContext {
	params: sc.ImmutableStringMapOfStringMapValueParams = new sc.ImmutableStringMapOfStringMapValueParams(wasmlib.paramsProxy());
	results: sc.MutableStringMapOfStringMapValueResults = new sc.MutableStringMapOfStringMapValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ScFuncs {
	static addressMapOfAddressArrayAppend(_ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressArrayAppendCall {
		const f = new AddressMapOfAddressArrayAppendCall();
		f.params = new sc.MutableAddressMapOfAddressArrayAppendParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressArrayClear(_ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressArrayClearCall {
		const f = new AddressMapOfAddressArrayClearCall();
		f.params = new sc.MutableAddressMapOfAddressArrayClearParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressArraySet(_ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressArraySetCall {
		const f = new AddressMapOfAddressArraySetCall();
		f.params = new sc.MutableAddressMapOfAddressArraySetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressMapClear(_ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressMapClearCall {
		const f = new AddressMapOfAddressMapClearCall();
		f.params = new sc.MutableAddressMapOfAddressMapClearParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressMapSet(_ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressMapSetCall {
		const f = new AddressMapOfAddressMapSetCall();
		f.params = new sc.MutableAddressMapOfAddressMapSetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfAddressArrayAppend(_ctx: wasmlib.ScFuncCallContext): ArrayOfAddressArrayAppendCall {
		const f = new ArrayOfAddressArrayAppendCall();
		f.params = new sc.MutableArrayOfAddressArrayAppendParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfAddressArrayClear(_ctx: wasmlib.ScFuncCallContext): ArrayOfAddressArrayClearCall {
		return new ArrayOfAddressArrayClearCall();
	}

	static arrayOfAddressArraySet(_ctx: wasmlib.ScFuncCallContext): ArrayOfAddressArraySetCall {
		const f = new ArrayOfAddressArraySetCall();
		f.params = new sc.MutableArrayOfAddressArraySetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfAddressMapClear(_ctx: wasmlib.ScFuncCallContext): ArrayOfAddressMapClearCall {
		return new ArrayOfAddressMapClearCall();
	}

	static arrayOfAddressMapSet(_ctx: wasmlib.ScFuncCallContext): ArrayOfAddressMapSetCall {
		const f = new ArrayOfAddressMapSetCall();
		f.params = new sc.MutableArrayOfAddressMapSetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfStringArrayAppend(_ctx: wasmlib.ScFuncCallContext): ArrayOfStringArrayAppendCall {
		const f = new ArrayOfStringArrayAppendCall();
		f.params = new sc.MutableArrayOfStringArrayAppendParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfStringArrayClear(_ctx: wasmlib.ScFuncCallContext): ArrayOfStringArrayClearCall {
		return new ArrayOfStringArrayClearCall();
	}

	static arrayOfStringArraySet(_ctx: wasmlib.ScFuncCallContext): ArrayOfStringArraySetCall {
		const f = new ArrayOfStringArraySetCall();
		f.params = new sc.MutableArrayOfStringArraySetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfStringMapClear(_ctx: wasmlib.ScFuncCallContext): ArrayOfStringMapClearCall {
		return new ArrayOfStringMapClearCall();
	}

	static arrayOfStringMapSet(_ctx: wasmlib.ScFuncCallContext): ArrayOfStringMapSetCall {
		const f = new ArrayOfStringMapSetCall();
		f.params = new sc.MutableArrayOfStringMapSetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static paramTypes(_ctx: wasmlib.ScFuncCallContext): ParamTypesCall {
		const f = new ParamTypesCall();
		f.params = new sc.MutableParamTypesParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static random(_ctx: wasmlib.ScFuncCallContext): RandomCall {
		return new RandomCall();
	}

	static stringMapOfStringArrayAppend(_ctx: wasmlib.ScFuncCallContext): StringMapOfStringArrayAppendCall {
		const f = new StringMapOfStringArrayAppendCall();
		f.params = new sc.MutableStringMapOfStringArrayAppendParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static stringMapOfStringArrayClear(_ctx: wasmlib.ScFuncCallContext): StringMapOfStringArrayClearCall {
		const f = new StringMapOfStringArrayClearCall();
		f.params = new sc.MutableStringMapOfStringArrayClearParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static stringMapOfStringArraySet(_ctx: wasmlib.ScFuncCallContext): StringMapOfStringArraySetCall {
		const f = new StringMapOfStringArraySetCall();
		f.params = new sc.MutableStringMapOfStringArraySetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static stringMapOfStringMapClear(_ctx: wasmlib.ScFuncCallContext): StringMapOfStringMapClearCall {
		const f = new StringMapOfStringMapClearCall();
		f.params = new sc.MutableStringMapOfStringMapClearParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static stringMapOfStringMapSet(_ctx: wasmlib.ScFuncCallContext): StringMapOfStringMapSetCall {
		const f = new StringMapOfStringMapSetCall();
		f.params = new sc.MutableStringMapOfStringMapSetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static takeAllowance(_ctx: wasmlib.ScFuncCallContext): TakeAllowanceCall {
		return new TakeAllowanceCall();
	}

	static takeBalance(_ctx: wasmlib.ScFuncCallContext): TakeBalanceCall {
		const f = new TakeBalanceCall();
		f.results = new sc.ImmutableTakeBalanceResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static triggerEvent(_ctx: wasmlib.ScFuncCallContext): TriggerEventCall {
		const f = new TriggerEventCall();
		f.params = new sc.MutableTriggerEventParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressArrayLength(_ctx: wasmlib.ScViewCallContext): AddressMapOfAddressArrayLengthCall {
		const f = new AddressMapOfAddressArrayLengthCall();
		f.params = new sc.MutableAddressMapOfAddressArrayLengthParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableAddressMapOfAddressArrayLengthResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static addressMapOfAddressArrayValue(_ctx: wasmlib.ScViewCallContext): AddressMapOfAddressArrayValueCall {
		const f = new AddressMapOfAddressArrayValueCall();
		f.params = new sc.MutableAddressMapOfAddressArrayValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableAddressMapOfAddressArrayValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static addressMapOfAddressMapValue(_ctx: wasmlib.ScViewCallContext): AddressMapOfAddressMapValueCall {
		const f = new AddressMapOfAddressMapValueCall();
		f.params = new sc.MutableAddressMapOfAddressMapValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableAddressMapOfAddressMapValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfAddressArrayLength(_ctx: wasmlib.ScViewCallContext): ArrayOfAddressArrayLengthCall {
		const f = new ArrayOfAddressArrayLengthCall();
		f.results = new sc.ImmutableArrayOfAddressArrayLengthResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfAddressArrayValue(_ctx: wasmlib.ScViewCallContext): ArrayOfAddressArrayValueCall {
		const f = new ArrayOfAddressArrayValueCall();
		f.params = new sc.MutableArrayOfAddressArrayValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableArrayOfAddressArrayValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfAddressMapValue(_ctx: wasmlib.ScViewCallContext): ArrayOfAddressMapValueCall {
		const f = new ArrayOfAddressMapValueCall();
		f.params = new sc.MutableArrayOfAddressMapValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableArrayOfAddressMapValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfStringArrayLength(_ctx: wasmlib.ScViewCallContext): ArrayOfStringArrayLengthCall {
		const f = new ArrayOfStringArrayLengthCall();
		f.results = new sc.ImmutableArrayOfStringArrayLengthResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfStringArrayValue(_ctx: wasmlib.ScViewCallContext): ArrayOfStringArrayValueCall {
		const f = new ArrayOfStringArrayValueCall();
		f.params = new sc.MutableArrayOfStringArrayValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableArrayOfStringArrayValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfStringMapValue(_ctx: wasmlib.ScViewCallContext): ArrayOfStringMapValueCall {
		const f = new ArrayOfStringMapValueCall();
		f.params = new sc.MutableArrayOfStringMapValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableArrayOfStringMapValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntAdd(_ctx: wasmlib.ScViewCallContext): BigIntAddCall {
		const f = new BigIntAddCall();
		f.params = new sc.MutableBigIntAddParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntAddResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntDiv(_ctx: wasmlib.ScViewCallContext): BigIntDivCall {
		const f = new BigIntDivCall();
		f.params = new sc.MutableBigIntDivParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntDivResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntMod(_ctx: wasmlib.ScViewCallContext): BigIntModCall {
		const f = new BigIntModCall();
		f.params = new sc.MutableBigIntModParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntModResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntMul(_ctx: wasmlib.ScViewCallContext): BigIntMulCall {
		const f = new BigIntMulCall();
		f.params = new sc.MutableBigIntMulParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntMulResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntSub(_ctx: wasmlib.ScViewCallContext): BigIntSubCall {
		const f = new BigIntSubCall();
		f.params = new sc.MutableBigIntSubParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntSubResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static blockRecord(_ctx: wasmlib.ScViewCallContext): BlockRecordCall {
		const f = new BlockRecordCall();
		f.params = new sc.MutableBlockRecordParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBlockRecordResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static blockRecords(_ctx: wasmlib.ScViewCallContext): BlockRecordsCall {
		const f = new BlockRecordsCall();
		f.params = new sc.MutableBlockRecordsParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBlockRecordsResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getRandom(_ctx: wasmlib.ScViewCallContext): GetRandomCall {
		const f = new GetRandomCall();
		f.results = new sc.ImmutableGetRandomResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static iotaBalance(_ctx: wasmlib.ScViewCallContext): IotaBalanceCall {
		const f = new IotaBalanceCall();
		f.results = new sc.ImmutableIotaBalanceResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static stringMapOfStringArrayLength(_ctx: wasmlib.ScViewCallContext): StringMapOfStringArrayLengthCall {
		const f = new StringMapOfStringArrayLengthCall();
		f.params = new sc.MutableStringMapOfStringArrayLengthParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableStringMapOfStringArrayLengthResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static stringMapOfStringArrayValue(_ctx: wasmlib.ScViewCallContext): StringMapOfStringArrayValueCall {
		const f = new StringMapOfStringArrayValueCall();
		f.params = new sc.MutableStringMapOfStringArrayValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableStringMapOfStringArrayValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static stringMapOfStringMapValue(_ctx: wasmlib.ScViewCallContext): StringMapOfStringMapValueCall {
		const f = new StringMapOfStringMapValueCall();
		f.params = new sc.MutableStringMapOfStringMapValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableStringMapOfStringMapValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}

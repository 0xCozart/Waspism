// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package testwasmlib

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type ArrayOfArraysAddrAppendCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableArrayOfArraysAddrAppendParams
}

type ArrayOfArraysAddrClearCall struct {
	Func    *wasmlib.ScFunc
}

type ArrayOfArraysAddrSetCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableArrayOfArraysAddrSetParams
}

type ArrayOfArraysAppendCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableArrayOfArraysAppendParams
}

type ArrayOfArraysClearCall struct {
	Func    *wasmlib.ScFunc
}

type ArrayOfArraysSetCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableArrayOfArraysSetParams
}

type ArrayOfMapsClearCall struct {
	Func    *wasmlib.ScFunc
}

type ArrayOfMapsSetCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableArrayOfMapsSetParams
}

type MapOfArraysAddrAppendCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfArraysAddrAppendParams
}

type MapOfArraysAddrClearCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfArraysAddrClearParams
}

type MapOfArraysAddrSetCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfArraysAddrSetParams
}

type MapOfArraysAppendCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfArraysAppendParams
}

type MapOfArraysClearCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfArraysClearParams
}

type MapOfArraysSetCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfArraysSetParams
}

type MapOfMapsAddrClearCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfMapsAddrClearParams
}

type MapOfMapsAddrSetCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfMapsAddrSetParams
}

type MapOfMapsClearCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfMapsClearParams
}

type MapOfMapsSetCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableMapOfMapsSetParams
}

type ParamTypesCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableParamTypesParams
}

type RandomCall struct {
	Func    *wasmlib.ScFunc
}

type TakeAllowanceCall struct {
	Func    *wasmlib.ScFunc
}

type TakeBalanceCall struct {
	Func    *wasmlib.ScFunc
	Results ImmutableTakeBalanceResults
}

type TriggerEventCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableTriggerEventParams
}

type ArrayOfArraysAddrLengthCall struct {
	Func    *wasmlib.ScView
	Results ImmutableArrayOfArraysAddrLengthResults
}

type ArrayOfArraysAddrValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayOfArraysAddrValueParams
	Results ImmutableArrayOfArraysAddrValueResults
}

type ArrayOfArraysLengthCall struct {
	Func    *wasmlib.ScView
	Results ImmutableArrayOfArraysLengthResults
}

type ArrayOfArraysValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayOfArraysValueParams
	Results ImmutableArrayOfArraysValueResults
}

type ArrayOfMapsValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayOfMapsValueParams
	Results ImmutableArrayOfMapsValueResults
}

type BlockRecordCall struct {
	Func    *wasmlib.ScView
	Params  MutableBlockRecordParams
	Results ImmutableBlockRecordResults
}

type BlockRecordsCall struct {
	Func    *wasmlib.ScView
	Params  MutableBlockRecordsParams
	Results ImmutableBlockRecordsResults
}

type GetRandomCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetRandomResults
}

type IotaBalanceCall struct {
	Func    *wasmlib.ScView
	Results ImmutableIotaBalanceResults
}

type MapOfArraysAddrLengthCall struct {
	Func    *wasmlib.ScView
	Params  MutableMapOfArraysAddrLengthParams
	Results ImmutableMapOfArraysAddrLengthResults
}

type MapOfArraysAddrValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableMapOfArraysAddrValueParams
	Results ImmutableMapOfArraysAddrValueResults
}

type MapOfArraysLengthCall struct {
	Func    *wasmlib.ScView
	Params  MutableMapOfArraysLengthParams
	Results ImmutableMapOfArraysLengthResults
}

type MapOfArraysValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableMapOfArraysValueParams
	Results ImmutableMapOfArraysValueResults
}

type MapOfMapsAddrValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableMapOfMapsAddrValueParams
	Results ImmutableMapOfMapsAddrValueResults
}

type MapOfMapsValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableMapOfMapsValueParams
	Results ImmutableMapOfMapsValueResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) ArrayOfArraysAddrAppend(ctx wasmlib.ScFuncCallContext) *ArrayOfArraysAddrAppendCall {
	f := &ArrayOfArraysAddrAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfArraysAddrAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfArraysAddrClear(ctx wasmlib.ScFuncCallContext) *ArrayOfArraysAddrClearCall {
	return &ArrayOfArraysAddrClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfArraysAddrClear)}
}

func (sc Funcs) ArrayOfArraysAddrSet(ctx wasmlib.ScFuncCallContext) *ArrayOfArraysAddrSetCall {
	f := &ArrayOfArraysAddrSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfArraysAddrSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfArraysAppend(ctx wasmlib.ScFuncCallContext) *ArrayOfArraysAppendCall {
	f := &ArrayOfArraysAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfArraysAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfArraysClear(ctx wasmlib.ScFuncCallContext) *ArrayOfArraysClearCall {
	return &ArrayOfArraysClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfArraysClear)}
}

func (sc Funcs) ArrayOfArraysSet(ctx wasmlib.ScFuncCallContext) *ArrayOfArraysSetCall {
	f := &ArrayOfArraysSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfArraysSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfMapsClear(ctx wasmlib.ScFuncCallContext) *ArrayOfMapsClearCall {
	return &ArrayOfMapsClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfMapsClear)}
}

func (sc Funcs) ArrayOfMapsSet(ctx wasmlib.ScFuncCallContext) *ArrayOfMapsSetCall {
	f := &ArrayOfMapsSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfMapsSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfArraysAddrAppend(ctx wasmlib.ScFuncCallContext) *MapOfArraysAddrAppendCall {
	f := &MapOfArraysAddrAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfArraysAddrAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfArraysAddrClear(ctx wasmlib.ScFuncCallContext) *MapOfArraysAddrClearCall {
	f := &MapOfArraysAddrClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfArraysAddrClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfArraysAddrSet(ctx wasmlib.ScFuncCallContext) *MapOfArraysAddrSetCall {
	f := &MapOfArraysAddrSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfArraysAddrSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfArraysAppend(ctx wasmlib.ScFuncCallContext) *MapOfArraysAppendCall {
	f := &MapOfArraysAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfArraysAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfArraysClear(ctx wasmlib.ScFuncCallContext) *MapOfArraysClearCall {
	f := &MapOfArraysClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfArraysClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfArraysSet(ctx wasmlib.ScFuncCallContext) *MapOfArraysSetCall {
	f := &MapOfArraysSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfArraysSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfMapsAddrClear(ctx wasmlib.ScFuncCallContext) *MapOfMapsAddrClearCall {
	f := &MapOfMapsAddrClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfMapsAddrClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfMapsAddrSet(ctx wasmlib.ScFuncCallContext) *MapOfMapsAddrSetCall {
	f := &MapOfMapsAddrSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfMapsAddrSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfMapsClear(ctx wasmlib.ScFuncCallContext) *MapOfMapsClearCall {
	f := &MapOfMapsClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfMapsClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapOfMapsSet(ctx wasmlib.ScFuncCallContext) *MapOfMapsSetCall {
	f := &MapOfMapsSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapOfMapsSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ParamTypes(ctx wasmlib.ScFuncCallContext) *ParamTypesCall {
	f := &ParamTypesCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncParamTypes)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Random(ctx wasmlib.ScFuncCallContext) *RandomCall {
	return &RandomCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncRandom)}
}

func (sc Funcs) TakeAllowance(ctx wasmlib.ScFuncCallContext) *TakeAllowanceCall {
	return &TakeAllowanceCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncTakeAllowance)}
}

func (sc Funcs) TakeBalance(ctx wasmlib.ScFuncCallContext) *TakeBalanceCall {
	f := &TakeBalanceCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncTakeBalance)}
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.proxy)
	return f
}

func (sc Funcs) TriggerEvent(ctx wasmlib.ScFuncCallContext) *TriggerEventCall {
	f := &TriggerEventCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncTriggerEvent)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfArraysAddrLength(ctx wasmlib.ScViewCallContext) *ArrayOfArraysAddrLengthCall {
	f := &ArrayOfArraysAddrLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfArraysAddrLength)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfArraysAddrValue(ctx wasmlib.ScViewCallContext) *ArrayOfArraysAddrValueCall {
	f := &ArrayOfArraysAddrValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfArraysAddrValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfArraysLength(ctx wasmlib.ScViewCallContext) *ArrayOfArraysLengthCall {
	f := &ArrayOfArraysLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfArraysLength)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfArraysValue(ctx wasmlib.ScViewCallContext) *ArrayOfArraysValueCall {
	f := &ArrayOfArraysValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfArraysValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfMapsValue(ctx wasmlib.ScViewCallContext) *ArrayOfMapsValueCall {
	f := &ArrayOfMapsValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfMapsValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BlockRecord(ctx wasmlib.ScViewCallContext) *BlockRecordCall {
	f := &BlockRecordCall{Func: wasmlib.NewScView(ctx, HScName, HViewBlockRecord)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BlockRecords(ctx wasmlib.ScViewCallContext) *BlockRecordsCall {
	f := &BlockRecordsCall{Func: wasmlib.NewScView(ctx, HScName, HViewBlockRecords)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetRandom(ctx wasmlib.ScViewCallContext) *GetRandomCall {
	f := &GetRandomCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetRandom)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) IotaBalance(ctx wasmlib.ScViewCallContext) *IotaBalanceCall {
	f := &IotaBalanceCall{Func: wasmlib.NewScView(ctx, HScName, HViewIotaBalance)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) MapOfArraysAddrLength(ctx wasmlib.ScViewCallContext) *MapOfArraysAddrLengthCall {
	f := &MapOfArraysAddrLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewMapOfArraysAddrLength)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) MapOfArraysAddrValue(ctx wasmlib.ScViewCallContext) *MapOfArraysAddrValueCall {
	f := &MapOfArraysAddrValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewMapOfArraysAddrValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) MapOfArraysLength(ctx wasmlib.ScViewCallContext) *MapOfArraysLengthCall {
	f := &MapOfArraysLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewMapOfArraysLength)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) MapOfArraysValue(ctx wasmlib.ScViewCallContext) *MapOfArraysValueCall {
	f := &MapOfArraysValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewMapOfArraysValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) MapOfMapsAddrValue(ctx wasmlib.ScViewCallContext) *MapOfMapsAddrValueCall {
	f := &MapOfMapsAddrValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewMapOfMapsAddrValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) MapOfMapsValue(ctx wasmlib.ScViewCallContext) *MapOfMapsValueCall {
	f := &MapOfMapsValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewMapOfMapsValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

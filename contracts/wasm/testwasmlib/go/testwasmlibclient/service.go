// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package testwasmlibclient

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmclient"

const (
	ArgAddress     = "address"
	ArgAgentID     = "agentID"
	ArgBlockIndex  = "blockIndex"
	ArgBool        = "bool"
	ArgBytes       = "bytes"
	ArgChainID     = "chainID"
	ArgColor       = "color"
	ArgHash        = "hash"
	ArgHname       = "hname"
	ArgIndex       = "index"
	ArgInt16       = "int16"
	ArgInt32       = "int32"
	ArgInt64       = "int64"
	ArgInt8        = "int8"
	ArgName        = "name"
	ArgParam       = "this"
	ArgRecordIndex = "recordIndex"
	ArgRequestID   = "requestID"
	ArgString      = "string"
	ArgUint16      = "uint16"
	ArgUint32      = "uint32"
	ArgUint64      = "uint64"
	ArgUint8       = "uint8"
	ArgValue       = "value"

	ResCount  = "count"
	ResIotas  = "iotas"
	ResLength = "length"
	ResRandom = "random"
	ResRecord = "record"
	ResValue  = "value"
)

///////////////////////////// arrayClear /////////////////////////////

type ArrayClearFunc struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f ArrayClearFunc) Name(v string) {
	f.args.SetString(ArgName, v)
}

func (f ArrayClearFunc) Post(transfer ...map[string]uint64) wasmclient.Request {
	f.args.Mandatory(ArgName)
	return f.svc.PostRequest(0x88021821, &f.args, transfer...)
}

///////////////////////////// arrayCreate /////////////////////////////

type ArrayCreateFunc struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f ArrayCreateFunc) Name(v string) {
	f.args.SetString(ArgName, v)
}

func (f ArrayCreateFunc) Post(transfer ...map[string]uint64) wasmclient.Request {
	f.args.Mandatory(ArgName)
	return f.svc.PostRequest(0x1ed5b23b, &f.args, transfer...)
}

///////////////////////////// arraySet /////////////////////////////

type ArraySetFunc struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f ArraySetFunc) Index(v int32) {
	f.args.SetInt32(ArgIndex, v)
}

func (f ArraySetFunc) Name(v string) {
	f.args.SetString(ArgName, v)
}

func (f ArraySetFunc) Value(v string) {
	f.args.SetString(ArgValue, v)
}

func (f ArraySetFunc) Post(transfer ...map[string]uint64) wasmclient.Request {
	f.args.Mandatory(ArgIndex)
	f.args.Mandatory(ArgName)
	f.args.Mandatory(ArgValue)
	return f.svc.PostRequest(0x2c4150b3, &f.args, transfer...)
}

///////////////////////////// paramTypes /////////////////////////////

type ParamTypesFunc struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f ParamTypesFunc) Address(v wasmclient.Address) {
	f.args.SetAddress(ArgAddress, v)
}

func (f ParamTypesFunc) AgentID(v wasmclient.AgentID) {
	f.args.SetAgentID(ArgAgentID, v)
}

func (f ParamTypesFunc) Bool(v bool) {
	f.args.SetBool(ArgBool, v)
}

func (f ParamTypesFunc) Bytes(v []byte) {
	f.args.SetBytes(ArgBytes, v)
}

func (f ParamTypesFunc) ChainID(v wasmclient.ChainID) {
	f.args.SetChainID(ArgChainID, v)
}

func (f ParamTypesFunc) Color(v wasmclient.Color) {
	f.args.SetColor(ArgColor, v)
}

func (f ParamTypesFunc) Hash(v wasmclient.Hash) {
	f.args.SetHash(ArgHash, v)
}

func (f ParamTypesFunc) Hname(v wasmclient.Hname) {
	f.args.SetHname(ArgHname, v)
}

func (f ParamTypesFunc) Int16(v int16) {
	f.args.SetInt16(ArgInt16, v)
}

func (f ParamTypesFunc) Int32(v int32) {
	f.args.SetInt32(ArgInt32, v)
}

func (f ParamTypesFunc) Int64(v int64) {
	f.args.SetInt64(ArgInt64, v)
}

func (f ParamTypesFunc) Int8(v int8) {
	f.args.SetInt8(ArgInt8, v)
}

func (f ParamTypesFunc) Param(v []byte) {
	f.args.SetBytes(ArgParam, v)
}

func (f ParamTypesFunc) RequestID(v wasmclient.RequestID) {
	f.args.SetRequestID(ArgRequestID, v)
}

func (f ParamTypesFunc) String(v string) {
	f.args.SetString(ArgString, v)
}

func (f ParamTypesFunc) Uint16(v uint16) {
	f.args.SetUint16(ArgUint16, v)
}

func (f ParamTypesFunc) Uint32(v uint32) {
	f.args.SetUint32(ArgUint32, v)
}

func (f ParamTypesFunc) Uint64(v uint64) {
	f.args.SetUint64(ArgUint64, v)
}

func (f ParamTypesFunc) Uint8(v uint8) {
	f.args.SetUint8(ArgUint8, v)
}

func (f ParamTypesFunc) Post(transfer ...map[string]uint64) wasmclient.Request {
	return f.svc.PostRequest(0x6921c4cd, &f.args, transfer...)
}

///////////////////////////// random /////////////////////////////

type RandomFunc struct {
	svc *wasmclient.Service
}

func (f RandomFunc) Post(transfer ...map[string]uint64) wasmclient.Request {
	return f.svc.PostRequest(0xe86c97ca, nil, transfer...)
}

///////////////////////////// triggerEvent /////////////////////////////

type TriggerEventFunc struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f TriggerEventFunc) Address(v wasmclient.Address) {
	f.args.SetAddress(ArgAddress, v)
}

func (f TriggerEventFunc) Name(v string) {
	f.args.SetString(ArgName, v)
}

func (f TriggerEventFunc) Post(transfer ...map[string]uint64) wasmclient.Request {
	f.args.Mandatory(ArgAddress)
	f.args.Mandatory(ArgName)
	return f.svc.PostRequest(0xd5438ac6, &f.args, transfer...)
}

///////////////////////////// arrayLength /////////////////////////////

type ArrayLengthView struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f ArrayLengthView) Name(v string) {
	f.args.SetString(ArgName, v)
}

func (f ArrayLengthView) Call() ArrayLengthResults {
	f.args.Mandatory(ArgName)
	return ArrayLengthResults{res: f.svc.CallView("arrayLength", &f.args)}
}

type ArrayLengthResults struct {
	res wasmclient.Results
}

func (r ArrayLengthResults) Length() int32 {
	return r.res.GetInt32(ResLength)
}

///////////////////////////// arrayValue /////////////////////////////

type ArrayValueView struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f ArrayValueView) Index(v int32) {
	f.args.SetInt32(ArgIndex, v)
}

func (f ArrayValueView) Name(v string) {
	f.args.SetString(ArgName, v)
}

func (f ArrayValueView) Call() ArrayValueResults {
	f.args.Mandatory(ArgIndex)
	f.args.Mandatory(ArgName)
	return ArrayValueResults{res: f.svc.CallView("arrayValue", &f.args)}
}

type ArrayValueResults struct {
	res wasmclient.Results
}

func (r ArrayValueResults) Value() string {
	return r.res.GetString(ResValue)
}

///////////////////////////// blockRecord /////////////////////////////

type BlockRecordView struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f BlockRecordView) BlockIndex(v int32) {
	f.args.SetInt32(ArgBlockIndex, v)
}

func (f BlockRecordView) RecordIndex(v int32) {
	f.args.SetInt32(ArgRecordIndex, v)
}

func (f BlockRecordView) Call() BlockRecordResults {
	f.args.Mandatory(ArgBlockIndex)
	f.args.Mandatory(ArgRecordIndex)
	return BlockRecordResults{res: f.svc.CallView("blockRecord", &f.args)}
}

type BlockRecordResults struct {
	res wasmclient.Results
}

func (r BlockRecordResults) Record() []byte {
	return r.res.GetBytes(ResRecord)
}

///////////////////////////// blockRecords /////////////////////////////

type BlockRecordsView struct {
	svc  *wasmclient.Service
	args wasmclient.Arguments
}

func (f BlockRecordsView) BlockIndex(v int32) {
	f.args.SetInt32(ArgBlockIndex, v)
}

func (f BlockRecordsView) Call() BlockRecordsResults {
	f.args.Mandatory(ArgBlockIndex)
	return BlockRecordsResults{res: f.svc.CallView("blockRecords", &f.args)}
}

type BlockRecordsResults struct {
	res wasmclient.Results
}

func (r BlockRecordsResults) Count() int32 {
	return r.res.GetInt32(ResCount)
}

///////////////////////////// getRandom /////////////////////////////

type GetRandomView struct {
	svc *wasmclient.Service
}

func (f GetRandomView) Call() GetRandomResults {
	return GetRandomResults{res: f.svc.CallView("getRandom", nil)}
}

type GetRandomResults struct {
	res wasmclient.Results
}

func (r GetRandomResults) Random() int64 {
	return r.res.GetInt64(ResRandom)
}

///////////////////////////// iotaBalance /////////////////////////////

type IotaBalanceView struct {
	svc *wasmclient.Service
}

func (f IotaBalanceView) Call() IotaBalanceResults {
	return IotaBalanceResults{res: f.svc.CallView("iotaBalance", nil)}
}

type IotaBalanceResults struct {
	res wasmclient.Results
}

func (r IotaBalanceResults) Iotas() int64 {
	return r.res.GetInt64(ResIotas)
}

///////////////////////////// TestWasmLibService /////////////////////////////

type TestWasmLibService struct {
	wasmclient.Service
}

func NewTestWasmLibService(cl *wasmclient.ServiceClient, chainID string) (*TestWasmLibService, error) {
	s := &TestWasmLibService{}
	err := s.Service.Init(cl, chainID, 0x89703a45, EventHandlers)
	return s, err
}

func (s *TestWasmLibService) ArrayClear() ArrayClearFunc {
	return ArrayClearFunc{svc: &s.Service}
}

func (s *TestWasmLibService) ArrayCreate() ArrayCreateFunc {
	return ArrayCreateFunc{svc: &s.Service}
}

func (s *TestWasmLibService) ArraySet() ArraySetFunc {
	return ArraySetFunc{svc: &s.Service}
}

func (s *TestWasmLibService) ParamTypes() ParamTypesFunc {
	return ParamTypesFunc{svc: &s.Service}
}

func (s *TestWasmLibService) Random() RandomFunc {
	return RandomFunc{svc: &s.Service}
}

func (s *TestWasmLibService) TriggerEvent() TriggerEventFunc {
	return TriggerEventFunc{svc: &s.Service}
}

func (s *TestWasmLibService) ArrayLength() ArrayLengthView {
	return ArrayLengthView{svc: &s.Service}
}

func (s *TestWasmLibService) ArrayValue() ArrayValueView {
	return ArrayValueView{svc: &s.Service}
}

func (s *TestWasmLibService) BlockRecord() BlockRecordView {
	return BlockRecordView{svc: &s.Service}
}

func (s *TestWasmLibService) BlockRecords() BlockRecordsView {
	return BlockRecordsView{svc: &s.Service}
}

func (s *TestWasmLibService) GetRandom() GetRandomView {
	return GetRandomView{svc: &s.Service}
}

func (s *TestWasmLibService) IotaBalance() IotaBalanceView {
	return IotaBalanceView{svc: &s.Service}
}

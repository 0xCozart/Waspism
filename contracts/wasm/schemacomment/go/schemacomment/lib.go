// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package schemacomment

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
		FuncStringMapOfStringArrayAppend,
		ViewStringMapOfStringArrayLength,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
		funcStringMapOfStringArrayAppendThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
		viewStringMapOfStringArrayLengthThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type StringMapOfStringArrayAppendContext struct {
	Events  SchemaCommentEvents
	Params  ImmutableStringMapOfStringArrayAppendParams
	Results MutableStringMapOfStringArrayAppendResults
	State   MutableSchemaCommentState
}

func funcStringMapOfStringArrayAppendThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("schemacomment.funcStringMapOfStringArrayAppend")
	results := wasmlib.NewScDict()
	f := &StringMapOfStringArrayAppendContext{
		Params: ImmutableStringMapOfStringArrayAppendParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableStringMapOfStringArrayAppendResults{
			proxy: results.AsProxy(),
		},
		State: MutableSchemaCommentState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	ctx.Require(f.Params.Value().Exists(), "missing mandatory value")
	funcStringMapOfStringArrayAppend(ctx, f)
	ctx.Results(results)
	ctx.Log("schemacomment.funcStringMapOfStringArrayAppend ok")
}

type StringMapOfStringArrayLengthContext struct {
	Params  ImmutableStringMapOfStringArrayLengthParams
	Results MutableStringMapOfStringArrayLengthResults
	State   ImmutableSchemaCommentState
}

func viewStringMapOfStringArrayLengthThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("schemacomment.viewStringMapOfStringArrayLength")
	results := wasmlib.NewScDict()
	f := &StringMapOfStringArrayLengthContext{
		Params: ImmutableStringMapOfStringArrayLengthParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableStringMapOfStringArrayLengthResults{
			proxy: results.AsProxy(),
		},
		State: ImmutableSchemaCommentState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	viewStringMapOfStringArrayLength(ctx, f)
	ctx.Results(results)
	ctx.Log("schemacomment.viewStringMapOfStringArrayLength ok")
}

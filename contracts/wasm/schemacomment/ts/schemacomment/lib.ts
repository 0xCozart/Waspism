// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

const exportMap: wasmlib.ScExportMap = {
	names: [
		sc.FuncStringMapOfStringArrayAppend,
		sc.ViewStringMapOfStringArrayLength,
	],
	funcs: [
		funcStringMapOfStringArrayAppendThunk,
	],
	views: [
		viewStringMapOfStringArrayLengthThunk,
	],
};

export function on_call(index: i32): void {
	wasmlib.ScExports.call(index, exportMap);
}

export function on_load(): void {
	wasmlib.ScExports.export(exportMap);
}

function funcStringMapOfStringArrayAppendThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("schemacomment.funcStringMapOfStringArrayAppend");
	let f = new sc.StringMapOfStringArrayAppendContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableStringMapOfStringArrayAppendResults(results.asProxy());
	const access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.name().exists(), "missing mandatory name");
	ctx.require(f.params.value().exists(), "missing mandatory value");
	sc.funcStringMapOfStringArrayAppend(ctx, f);
	ctx.results(results);
	ctx.log("schemacomment.funcStringMapOfStringArrayAppend ok");
}

function viewStringMapOfStringArrayLengthThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("schemacomment.viewStringMapOfStringArrayLength");
	let f = new sc.StringMapOfStringArrayLengthContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableStringMapOfStringArrayLengthResults(results.asProxy());
	ctx.require(f.params.name().exists(), "missing mandatory name");
	sc.viewStringMapOfStringArrayLength(ctx, f);
	ctx.results(results);
	ctx.log("schemacomment.viewStringMapOfStringArrayLength ok");
}

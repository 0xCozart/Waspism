// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableInt64 {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableInt64 {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_int64(&self, index: u32) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ImmutableSchemaCommentState {
	pub(crate) proxy: Proxy,
}

impl ImmutableSchemaCommentState {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(STATE_OWNER))
	}

    pub fn test_state(&self) -> ArrayOfImmutableInt64 {
		ArrayOfImmutableInt64 { proxy: self.proxy.root(STATE_TEST_STATE) }
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableInt64 {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableInt64 {
	pub fn append_int64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_int64(&self, index: u32) -> ScMutableInt64 {
        ScMutableInt64::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MutableSchemaCommentState {
	pub(crate) proxy: Proxy,
}

impl MutableSchemaCommentState {
    pub fn as_immutable(&self) -> ImmutableSchemaCommentState {
		ImmutableSchemaCommentState { proxy: self.proxy.root("") }
	}

    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(STATE_OWNER))
	}

    pub fn test_state(&self) -> ArrayOfMutableInt64 {
		ArrayOfMutableInt64 { proxy: self.proxy.root(STATE_TEST_STATE) }
	}
}

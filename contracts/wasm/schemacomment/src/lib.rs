// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use schemacomment::*;
use wasmlib::*;

use crate::consts::*;
use crate::events::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;
use crate::structs::*;
use crate::typedefs::*;

mod consts;
mod contract;
mod events;
mod params;
mod results;
mod state;
mod structs;
mod typedefs;

mod schemacomment;

const EXPORT_MAP: ScExportMap = ScExportMap {
    names: &[
    	FUNC_STRING_MAP_OF_STRING_ARRAY_APPEND,
    	VIEW_STRING_MAP_OF_STRING_ARRAY_LENGTH,
	],
    funcs: &[
    	func_string_map_of_string_array_append_thunk,
	],
    views: &[
    	view_string_map_of_string_array_length_thunk,
	],
};

#[no_mangle]
fn on_call(index: i32) {
	ScExports::call(index, &EXPORT_MAP);
}

#[no_mangle]
fn on_load() {
    ScExports::export(&EXPORT_MAP);
}

pub struct StringMapOfStringArrayAppendContext {
	events:  SchemaCommentEvents,
	params: ImmutableStringMapOfStringArrayAppendParams,
	results: MutableStringMapOfStringArrayAppendResults,
	state: MutableSchemaCommentState,
}

fn func_string_map_of_string_array_append_thunk(ctx: &ScFuncContext) {
	ctx.log("schemacomment.funcStringMapOfStringArrayAppend");
	let f = StringMapOfStringArrayAppendContext {
		events:  SchemaCommentEvents {},
		params: ImmutableStringMapOfStringArrayAppendParams { proxy: params_proxy() },
		results: MutableStringMapOfStringArrayAppendResults { proxy: results_proxy() },
		state: MutableSchemaCommentState { proxy: state_proxy() },
	};
	let access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	ctx.require(f.params.name().exists(), "missing mandatory name");
	ctx.require(f.params.value().exists(), "missing mandatory value");
	func_string_map_of_string_array_append(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("schemacomment.funcStringMapOfStringArrayAppend ok");
}

pub struct StringMapOfStringArrayLengthContext {
	params: ImmutableStringMapOfStringArrayLengthParams,
	results: MutableStringMapOfStringArrayLengthResults,
	state: ImmutableSchemaCommentState,
}

fn view_string_map_of_string_array_length_thunk(ctx: &ScViewContext) {
	ctx.log("schemacomment.viewStringMapOfStringArrayLength");
	let f = StringMapOfStringArrayLengthContext {
		params: ImmutableStringMapOfStringArrayLengthParams { proxy: params_proxy() },
		results: MutableStringMapOfStringArrayLengthResults { proxy: results_proxy() },
		state: ImmutableSchemaCommentState { proxy: state_proxy() },
	};
	ctx.require(f.params.name().exists(), "missing mandatory name");
	view_string_map_of_string_array_length(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("schemacomment.viewStringMapOfStringArrayLength ok");
}

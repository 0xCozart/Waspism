// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmtypes from "wasmlib/wasmtypes";
import * as sc from "./index";

export class ImmutableFoundryCreateNewResults extends wasmtypes.ScProxy {
	foundrySN(): wasmtypes.ScImmutableUint32 {
		return new wasmtypes.ScImmutableUint32(this.proxy.root(sc.ResultFoundrySN));
	}
}

export class MutableFoundryCreateNewResults extends wasmtypes.ScProxy {
	foundrySN(): wasmtypes.ScMutableUint32 {
		return new wasmtypes.ScMutableUint32(this.proxy.root(sc.ResultFoundrySN));
	}
}

export class ImmutableAccountNFTsResults extends wasmtypes.ScProxy {
	nftIDs(): wasmtypes.ScImmutableBytes {
		return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ResultNftIDs));
	}
}

export class MutableAccountNFTsResults extends wasmtypes.ScProxy {
	nftIDs(): wasmtypes.ScMutableBytes {
		return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ResultNftIDs));
	}
}

export class MapTokenIDToImmutableUint64 extends wasmtypes.ScProxy {

	getUint64(key: wasmtypes.ScTokenID): wasmtypes.ScImmutableUint64 {
		return new wasmtypes.ScImmutableUint64(this.proxy.key(wasmtypes.tokenIDToBytes(key)));
	}
}

export class ImmutableAccountsResults extends wasmtypes.ScProxy {
	allAccounts(): sc.MapTokenIDToImmutableUint64 {
		return new sc.MapTokenIDToImmutableUint64(this.proxy);
	}
}

export class MapTokenIDToMutableUint64 extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getUint64(key: wasmtypes.ScTokenID): wasmtypes.ScMutableUint64 {
		return new wasmtypes.ScMutableUint64(this.proxy.key(wasmtypes.tokenIDToBytes(key)));
	}
}

export class MutableAccountsResults extends wasmtypes.ScProxy {
	allAccounts(): sc.MapTokenIDToMutableUint64 {
		return new sc.MapTokenIDToMutableUint64(this.proxy);
	}
}

export class ImmutableBalanceResults extends wasmtypes.ScProxy {
	balances(): sc.MapTokenIDToImmutableUint64 {
		return new sc.MapTokenIDToImmutableUint64(this.proxy);
	}
}

export class MutableBalanceResults extends wasmtypes.ScProxy {
	balances(): sc.MapTokenIDToMutableUint64 {
		return new sc.MapTokenIDToMutableUint64(this.proxy);
	}
}

export class ImmutableFoundryOutputResults extends wasmtypes.ScProxy {
	foundryOutputBin(): wasmtypes.ScImmutableBytes {
		return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ResultFoundryOutputBin));
	}
}

export class MutableFoundryOutputResults extends wasmtypes.ScProxy {
	foundryOutputBin(): wasmtypes.ScMutableBytes {
		return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ResultFoundryOutputBin));
	}
}

export class ImmutableGetAccountNonceResults extends wasmtypes.ScProxy {
	accountNonce(): wasmtypes.ScImmutableUint64 {
		return new wasmtypes.ScImmutableUint64(this.proxy.root(sc.ResultAccountNonce));
	}
}

export class MutableGetAccountNonceResults extends wasmtypes.ScProxy {
	accountNonce(): wasmtypes.ScMutableUint64 {
		return new wasmtypes.ScMutableUint64(this.proxy.root(sc.ResultAccountNonce));
	}
}

export class MapTokenIDToImmutableBool extends wasmtypes.ScProxy {

	getBool(key: wasmtypes.ScTokenID): wasmtypes.ScImmutableBool {
		return new wasmtypes.ScImmutableBool(this.proxy.key(wasmtypes.tokenIDToBytes(key)));
	}
}

export class ImmutableGetNativeTokenIDRegistryResults extends wasmtypes.ScProxy {
	mapping(): sc.MapTokenIDToImmutableBool {
		return new sc.MapTokenIDToImmutableBool(this.proxy.root(sc.ResultMapping));
	}
}

export class MapTokenIDToMutableBool extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getBool(key: wasmtypes.ScTokenID): wasmtypes.ScMutableBool {
		return new wasmtypes.ScMutableBool(this.proxy.key(wasmtypes.tokenIDToBytes(key)));
	}
}

export class MutableGetNativeTokenIDRegistryResults extends wasmtypes.ScProxy {
	mapping(): sc.MapTokenIDToMutableBool {
		return new sc.MapTokenIDToMutableBool(this.proxy.root(sc.ResultMapping));
	}
}

export class ImmutableNftDataResults extends wasmtypes.ScProxy {
	nftData(): wasmtypes.ScImmutableBytes {
		return new wasmtypes.ScImmutableBytes(this.proxy.root(sc.ResultNftData));
	}
}

export class MutableNftDataResults extends wasmtypes.ScProxy {
	nftData(): wasmtypes.ScMutableBytes {
		return new wasmtypes.ScMutableBytes(this.proxy.root(sc.ResultNftData));
	}
}

export class ImmutableTotalAssetsResults extends wasmtypes.ScProxy {
	assets(): sc.MapTokenIDToImmutableUint64 {
		return new sc.MapTokenIDToImmutableUint64(this.proxy);
	}
}

export class MutableTotalAssetsResults extends wasmtypes.ScProxy {
	assets(): sc.MapTokenIDToMutableUint64 {
		return new sc.MapTokenIDToMutableUint64(this.proxy);
	}
}

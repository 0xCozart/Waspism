// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class AddAllowedStateControllerAddressCall {
	func: wasmlib.ScFunc;
	params: sc.MutableAddAllowedStateControllerAddressParams = new sc.MutableAddAllowedStateControllerAddressParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncAddAllowedStateControllerAddress);
	}
}

export class ClaimChainOwnershipCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncClaimChainOwnership);
	}
}

export class DelegateChainOwnershipCall {
	func: wasmlib.ScFunc;
	params: sc.MutableDelegateChainOwnershipParams = new sc.MutableDelegateChainOwnershipParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncDelegateChainOwnership);
	}
}

export class RemoveAllowedStateControllerAddressCall {
	func: wasmlib.ScFunc;
	params: sc.MutableRemoveAllowedStateControllerAddressParams = new sc.MutableRemoveAllowedStateControllerAddressParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncRemoveAllowedStateControllerAddress);
	}
}

export class RotateStateControllerCall {
	func: wasmlib.ScFunc;
	params: sc.MutableRotateStateControllerParams = new sc.MutableRotateStateControllerParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncRotateStateController);
	}
}

export class SetChainInfoCall {
	func: wasmlib.ScFunc;
	params: sc.MutableSetChainInfoParams = new sc.MutableSetChainInfoParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncSetChainInfo);
	}
}

export class SetContractFeeCall {
	func: wasmlib.ScFunc;
	params: sc.MutableSetContractFeeParams = new sc.MutableSetContractFeeParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncSetContractFee);
	}
}

export class SetDefaultFeeCall {
	func: wasmlib.ScFunc;
	params: sc.MutableSetDefaultFeeParams = new sc.MutableSetDefaultFeeParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncSetDefaultFee);
	}
}

export class GetAllowedStateControllerAddressesCall {
	func: wasmlib.ScView;
	results: sc.ImmutableGetAllowedStateControllerAddressesResults = new sc.ImmutableGetAllowedStateControllerAddressesResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetAllowedStateControllerAddresses);
	}
}

export class GetChainInfoCall {
	func: wasmlib.ScView;
	results: sc.ImmutableGetChainInfoResults = new sc.ImmutableGetChainInfoResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetChainInfo);
	}
}

export class GetFeeInfoCall {
	func: wasmlib.ScView;
	params: sc.MutableGetFeeInfoParams = new sc.MutableGetFeeInfoParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableGetFeeInfoResults = new sc.ImmutableGetFeeInfoResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetFeeInfo);
	}
}

export class GetMaxBlobSizeCall {
	func: wasmlib.ScView;
	results: sc.ImmutableGetMaxBlobSizeResults = new sc.ImmutableGetMaxBlobSizeResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetMaxBlobSize);
	}
}

export class ScFuncs {
	static addAllowedStateControllerAddress(ctx: wasmlib.ScFuncCallContext): AddAllowedStateControllerAddressCall {
		const f = new AddAllowedStateControllerAddressCall(ctx);
		f.params = new sc.MutableAddAllowedStateControllerAddressParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static claimChainOwnership(ctx: wasmlib.ScFuncCallContext): ClaimChainOwnershipCall {
		return new ClaimChainOwnershipCall(ctx);
	}

	static delegateChainOwnership(ctx: wasmlib.ScFuncCallContext): DelegateChainOwnershipCall {
		const f = new DelegateChainOwnershipCall(ctx);
		f.params = new sc.MutableDelegateChainOwnershipParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static removeAllowedStateControllerAddress(ctx: wasmlib.ScFuncCallContext): RemoveAllowedStateControllerAddressCall {
		const f = new RemoveAllowedStateControllerAddressCall(ctx);
		f.params = new sc.MutableRemoveAllowedStateControllerAddressParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static rotateStateController(ctx: wasmlib.ScFuncCallContext): RotateStateControllerCall {
		const f = new RotateStateControllerCall(ctx);
		f.params = new sc.MutableRotateStateControllerParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setChainInfo(ctx: wasmlib.ScFuncCallContext): SetChainInfoCall {
		const f = new SetChainInfoCall(ctx);
		f.params = new sc.MutableSetChainInfoParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setContractFee(ctx: wasmlib.ScFuncCallContext): SetContractFeeCall {
		const f = new SetContractFeeCall(ctx);
		f.params = new sc.MutableSetContractFeeParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setDefaultFee(ctx: wasmlib.ScFuncCallContext): SetDefaultFeeCall {
		const f = new SetDefaultFeeCall(ctx);
		f.params = new sc.MutableSetDefaultFeeParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static getAllowedStateControllerAddresses(ctx: wasmlib.ScViewCallContext): GetAllowedStateControllerAddressesCall {
		const f = new GetAllowedStateControllerAddressesCall(ctx);
		f.results = new sc.ImmutableGetAllowedStateControllerAddressesResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getChainInfo(ctx: wasmlib.ScViewCallContext): GetChainInfoCall {
		const f = new GetChainInfoCall(ctx);
		f.results = new sc.ImmutableGetChainInfoResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getFeeInfo(ctx: wasmlib.ScViewCallContext): GetFeeInfoCall {
		const f = new GetFeeInfoCall(ctx);
		f.params = new sc.MutableGetFeeInfoParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableGetFeeInfoResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getMaxBlobSize(ctx: wasmlib.ScViewCallContext): GetMaxBlobSizeCall {
		const f = new GetMaxBlobSizeCall(ctx);
		f.results = new sc.ImmutableGetMaxBlobSizeResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}

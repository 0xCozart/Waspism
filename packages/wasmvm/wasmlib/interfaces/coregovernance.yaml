name: CoreGovernance
description: Core governance contract
structs: {}
typedefs: {} 
state: {}
funcs:
  # state controller
  rotateStateController:
    params:
      stateControllerAddress=S: Address
  addAllowedStateControllerAddress:
    params:
      stateControllerAddress=S: Address
  removeAllowedStateControllerAddress:
    params:
      stateControllerAddress=S: Address
  # chain owner
  claimChainOwnership: {}
  delegateChainOwnership:
    params:
      chainOwner=c: AgentID
  # fees
  setFeePolicy:
    params:
      feePolicyBytes=d: Bytes
    results:
      gasFeePolicyBytes: Bytes
  # chain info
  setChainInfo:
    params:
      maxBlobSize=g: Uint32? # default maximum size of a blob
      maxEventSize=h: Uint16? # default maximum size of a single event
      maxEventsPerReq=i: Uint16? # default maximum number of events per request
  # access nodes
  addCandidateNode: {}
  revokeAccessNode: {} //
  changeAccessNodes:
    params:
      changeAccessNodesActions: map[Bytes]Uint8

views:
  # state controller
  getAllowedStateControllerAddresses:
    results:
      allowedStateControllerAddresses=b: Address[] # native contract, so this is an Array16
  # chain owner
  getChainOwner:
    results:
      chainOwner=c: AgentID
  # fees
  getFeePolicy:
    results:
      feePolicyBytes: Bytes
  # chain info
  getChainInfo:
    results:
      chainID=c: ChainID
      chainOwnerID=o: AgentID
      description=d: String
      gasFeePolicyBytes=g: Bytes
      maxBlobSize=mb: Uint32
      maxEventSize=me: Uint16
      maxEventsPerReq=mr: Uint16
  getMaxBlobSize:
    results:
      maxBlobSize=mb: Uint32
  # access nodes
  getChainNodes:
    accessNodeCandidates=ac: map[Bytes]Bytes
    accessNodes=an: map[Bytes]Bytes

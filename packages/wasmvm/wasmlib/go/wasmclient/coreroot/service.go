// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package corerootclient

import (
	wasmclient2 "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmclient"
)

const (
	ArgDeployer    = "dp"
	ArgDescription = "ds"
	ArgHname       = "hn"
	ArgName        = "nm"
	ArgProgramHash = "ph"

	ResContractFound    = "cf"
	ResContractRecData  = "dt"
	ResContractRegistry = "r"
)

///////////////////////////// deployContract /////////////////////////////

type DeployContractFunc struct {
	wasmclient2.ClientFunc
	args wasmclient2.Arguments
}

func (f *DeployContractFunc) Description(v string) {
	f.args.Set(ArgDescription, f.args.FromString(v))
}

func (f *DeployContractFunc) Name(v string) {
	f.args.Set(ArgName, f.args.FromString(v))
}

func (f *DeployContractFunc) ProgramHash(v wasmclient2.Hash) {
	f.args.Set(ArgProgramHash, f.args.FromHash(v))
}

func (f *DeployContractFunc) Post() wasmclient2.Request {
	f.args.Mandatory(ArgName)
	f.args.Mandatory(ArgProgramHash)
	return f.ClientFunc.Post(0x28232c27, &f.args)
}

///////////////////////////// grantDeployPermission /////////////////////////////

type GrantDeployPermissionFunc struct {
	wasmclient2.ClientFunc
	args wasmclient2.Arguments
}

func (f *GrantDeployPermissionFunc) Deployer(v wasmclient2.AgentID) {
	f.args.Set(ArgDeployer, f.args.FromAgentID(v))
}

func (f *GrantDeployPermissionFunc) Post() wasmclient2.Request {
	f.args.Mandatory(ArgDeployer)
	return f.ClientFunc.Post(0xf440263a, &f.args)
}

///////////////////////////// revokeDeployPermission /////////////////////////////

type RevokeDeployPermissionFunc struct {
	wasmclient2.ClientFunc
	args wasmclient2.Arguments
}

func (f *RevokeDeployPermissionFunc) Deployer(v wasmclient2.AgentID) {
	f.args.Set(ArgDeployer, f.args.FromAgentID(v))
}

func (f *RevokeDeployPermissionFunc) Post() wasmclient2.Request {
	f.args.Mandatory(ArgDeployer)
	return f.ClientFunc.Post(0x850744f1, &f.args)
}

///////////////////////////// findContract /////////////////////////////

type FindContractView struct {
	wasmclient2.ClientView
	args wasmclient2.Arguments
}

func (f *FindContractView) Hname(v wasmclient2.Hname) {
	f.args.Set(ArgHname, f.args.FromHname(v))
}

func (f *FindContractView) Call() FindContractResults {
	f.args.Mandatory(ArgHname)
	f.ClientView.Call("findContract", &f.args)
	return FindContractResults{res: f.Results()}
}

type FindContractResults struct {
	res wasmclient2.Results
}

func (r *FindContractResults) ContractFound() []byte {
	return r.res.ToBytes(r.res.Get(ResContractFound))
}

func (r *FindContractResults) ContractRecData() []byte {
	return r.res.ToBytes(r.res.Get(ResContractRecData))
}

///////////////////////////// getContractRecords /////////////////////////////

type GetContractRecordsView struct {
	wasmclient2.ClientView
}

func (f *GetContractRecordsView) Call() GetContractRecordsResults {
	f.ClientView.Call("getContractRecords", nil)
	return GetContractRecordsResults{res: f.Results()}
}

type GetContractRecordsResults struct {
	res wasmclient2.Results
}

func (r *GetContractRecordsResults) ContractRegistry() map[wasmclient2.Hname][]byte {
	res := make(map[wasmclient2.Hname][]byte)
	r.res.ForEach(func(key []byte, val []byte) {
		res[r.res.ToHname(key)] = r.res.ToBytes(val)
	})
	return res
}

///////////////////////////// CoreRootService /////////////////////////////

type CoreRootService struct {
	wasmclient2.Service
}

func NewCoreRootService(cl *wasmclient2.ServiceClient, chainID string) (*CoreRootService, error) {
	s := &CoreRootService{}
	err := s.Service.Init(cl, chainID, 0xcebf5908)
	return s, err
}

func (s *CoreRootService) DeployContract() DeployContractFunc {
	return DeployContractFunc{ClientFunc: s.AsClientFunc()}
}

func (s *CoreRootService) GrantDeployPermission() GrantDeployPermissionFunc {
	return GrantDeployPermissionFunc{ClientFunc: s.AsClientFunc()}
}

func (s *CoreRootService) RevokeDeployPermission() RevokeDeployPermissionFunc {
	return RevokeDeployPermissionFunc{ClientFunc: s.AsClientFunc()}
}

func (s *CoreRootService) FindContract() FindContractView {
	return FindContractView{ClientView: s.AsClientView()}
}

func (s *CoreRootService) GetContractRecords() GetContractRecordsView {
	return GetContractRecordsView{ClientView: s.AsClientView()}
}
